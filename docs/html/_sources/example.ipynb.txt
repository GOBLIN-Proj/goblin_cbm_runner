{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example Usage\n",
    "\n",
    "Here is a demonstartion of the potential usage of ```cbm_runner```.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports\n",
    "\n",
    "Firstly, we start of by importing the relevant classes. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cbm_runner.runner import Runner\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "\n",
    "\n",
    "import warnings\n",
    "\n",
    "# Filter out the RuntimeWarning related to unsupported linux distribution\n",
    "warnings.filterwarnings(\"ignore\", message=\"unsupported linux distribution:\", category=RuntimeWarning)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ```Runner``` class is basically used to set to run the scenarios based on the configuration files for the CBM CFS3.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Runner\n",
    "\n",
    "In the first example below, we will set the path to the configurations and data, define the base and target year. Finally, we will create a directory for our outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# path to data\n",
    "path = \"../tests/data/runner_input/\"\n",
    "\n",
    "# afforestation data for each scenario\n",
    "afforest_data = pd.read_csv(\n",
    "    os.path.join(path, \"cbm_afforestation.csv\"), index_col=0\n",
    ")\n",
    "\n",
    "# basic configuration file\n",
    "config = os.path.join(path, \"cbm_factory.yaml\")\n",
    "\n",
    "# scenario_data\n",
    "sc_data = pd.read_csv(os.path.join(path, \"scenario_dataframe.csv\"))\n",
    "\n",
    "# calibration and end point\n",
    "calibration_year = 2020\n",
    "\n",
    "\n",
    "#Make directory to store exported file\n",
    "\n",
    "os.mkdir(\"jupyter_example\")\n",
    "\n",
    "data_path = \"./jupyter_example/\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Inputs Example\n",
    "Here we can see what our data inputs look like. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    scenario species yield_class     total_area\n",
      "0         -1   Sitka     YC17_20       0.000000\n",
      "1         -1   Sitka     YC20_24       0.000000\n",
      "2         -1   Sitka     YC24_30       0.000000\n",
      "3         -1     SGB         YC6       0.000000\n",
      "4         -1     SGB         YC6       0.000000\n",
      "5         -1     SGB         YC6       0.000000\n",
      "6          0   Sitka     YC24_30  417595.058325\n",
      "7          0     SGB         YC6  715935.503074\n",
      "8          0   Sitka     YC20_24  208791.204651\n",
      "9          0     SGB         YC6  357956.908635\n",
      "10         0   Sitka     YC17_20       0.000000\n",
      "11         0     SGB         YC6       0.000000\n",
      "12         1   Sitka     YC24_30  418877.449812\n",
      "13         1     SGB         YC6  718134.067390\n",
      "14         1   Sitka     YC20_24  508198.559238\n",
      "15         1     SGB         YC6  871268.430782\n",
      "16         1   Sitka     YC17_20    5823.216747\n",
      "17         1     SGB         YC6    9983.469700\n"
     ]
    }
   ],
   "source": [
    "# Scenario afforestation areas \n",
    "print(afforest_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifiers:\n",
      "\n",
      "  harvest:\n",
      "    clearfell: 0.05\n",
      "    thinning: 0.05\n",
      "\n",
      "  age_classes:\n",
      "    max_age: 100\n",
      "    age_interval: 5\n",
      "\n",
      "  species:\n",
      "    - Sitka\n",
      "    - SGB\n",
      "\n",
      "  yield_class:\n",
      "    Sitka:\n",
      "      - YC13_16: 0.37\n",
      "      - YC17_20: 0.26\n",
      "      - YC20_24: 0.20\n",
      "      - YC24_30: 0.17\n",
      "    SGB:\n",
      "      - YC10: 1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Configuration file\n",
    "with open(config, 'r') as file:\n",
    "    config_contents = file.read()\n",
    "\n",
    "print(config_contents) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Unnamed: 0  Scenarios Cattle systems Manure management      Dairy pop  \\\n",
      "0            0          0          Dairy        tank solid       0.000000   \n",
      "1            1          0          Dairy       tank liquid  172390.090632   \n",
      "2            2          0           Beef        tank solid       0.000000   \n",
      "3            3          0           Beef       tank liquid       0.000000   \n",
      "4            4          0  Lowland sheep       tank liquid       0.000000   \n",
      "5            5          0   Upland sheep       tank liquid       0.000000   \n",
      "6            6          1          Dairy        tank solid       0.000000   \n",
      "7            7          1          Dairy       tank liquid  172390.090632   \n",
      "8            8          1           Beef        tank solid       0.000000   \n",
      "9            9          1           Beef       tank liquid       0.000000   \n",
      "10          10          1  Lowland sheep       tank liquid       0.000000   \n",
      "11          11          1   Upland sheep       tank liquid       0.000000   \n",
      "\n",
      "        Beef pop  Dairy prod  Beef prod  mm_storage  Cattle EF  ...  \\\n",
      "0       0.000000    0.087908   0.500607           0          0  ...   \n",
      "1       0.000000    0.087908   0.500607           0          0  ...   \n",
      "2       0.000000    0.087908   0.500607           0          0  ...   \n",
      "3   27807.487071    0.087908   0.500607           0          0  ...   \n",
      "4       0.000000    0.087908   0.500607           0          0  ...   \n",
      "5       0.000000    0.087908   0.500607           0          0  ...   \n",
      "6       0.000000    0.087908   0.500607           0          0  ...   \n",
      "7       0.000000    0.087908   0.500607           0          0  ...   \n",
      "8       0.000000    0.087908   0.500607           0          0  ...   \n",
      "9   27807.487071    0.087908   0.500607           0          0  ...   \n",
      "10      0.000000    0.087908   0.500607           0          0  ...   \n",
      "11      0.000000    0.087908   0.500607           0          0  ...   \n",
      "\n",
      "    Land rewetting  Grass management  Upland sheep pop  Upland sheep prod  \\\n",
      "0                0           0.08792                 0                  0   \n",
      "1                0           0.08792                 0                  0   \n",
      "2                0           0.08792                 0                  0   \n",
      "3                0           0.08792                 0                  0   \n",
      "4                0           0.08792                 0                  0   \n",
      "5                0           0.08792              9453                  0   \n",
      "6                0           0.08792                 0                  0   \n",
      "7                0           0.08792                 0                  0   \n",
      "8                0           0.08792                 0                  0   \n",
      "9                0           0.08792                 0                  0   \n",
      "10               0           0.08792                 0                  0   \n",
      "11               0           0.08792              9453                  0   \n",
      "\n",
      "    Lowland sheep pop  Lowland sheep prod  Dairy Pasture fertilisation  \\\n",
      "0                   0                   0                   136.870525   \n",
      "1                   0                   0                   136.870525   \n",
      "2                   0                   0                   136.870525   \n",
      "3                   0                   0                   136.870525   \n",
      "4               37812                   0                   136.870525   \n",
      "5                   0                   0                   136.870525   \n",
      "6                   0                   0                   136.870525   \n",
      "7                   0                   0                   136.870525   \n",
      "8                   0                   0                   136.870525   \n",
      "9                   0                   0                   136.870525   \n",
      "10              37812                   0                   136.870525   \n",
      "11                  0                   0                   136.870525   \n",
      "\n",
      "    Beef Pasture fertilisation  Broadleaf proportion  Afforest Year  \n",
      "0                   105.001711              0.591629           2050  \n",
      "1                   105.001711              0.591629           2050  \n",
      "2                   105.001711              0.591629           2050  \n",
      "3                   105.001711              0.591629           2050  \n",
      "4                   105.001711              0.591629           2050  \n",
      "5                   105.001711              0.591629           2050  \n",
      "6                   105.001711              0.591629           2050  \n",
      "7                   105.001711              0.591629           2050  \n",
      "8                   105.001711              0.591629           2050  \n",
      "9                   105.001711              0.591629           2050  \n",
      "10                  105.001711              0.591629           2050  \n",
      "11                  105.001711              0.591629           2050  \n",
      "\n",
      "[12 rows x 29 columns]\n"
     ]
    }
   ],
   "source": [
    "# Scenario data\n",
    "print(sc_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define classes and Run Scenarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# instance of the Runner class\n",
    "runner = Runner(config, calibration_year, afforest_data, sc_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# generation of data for each of the scenarios\n",
    "runner.generate_input_data()\n",
    "\n",
    "# generation of aggregated results\n",
    "runner.run_aggregate_scenarios().to_csv(os.path.join(data_path, \"c_stock.csv\"))\n",
    "\n",
    "# generation of annual flux results\n",
    "runner.run_flux_scenarios().to_csv(os.path.join(data_path, \"c_flux.csv\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lets try importing and displaying the information\n",
    "\n",
    "stocks = pd.read_csv(os.path.join(data_path, \"c_stock.csv\"), index_col=0)\n",
    "\n",
    "fluxes = pd.read_csv(os.path.join(data_path, \"c_flux.csv\"), index_col=0)\n",
    "\n",
    "#We can always store these in memory without exporting to disk. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>AGB</th>\n",
       "      <th>BGB</th>\n",
       "      <th>Deadwood</th>\n",
       "      <th>Litter</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Total Ecosystem</th>\n",
       "      <th>Scenario</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>4.514063e+07</td>\n",
       "      <td>1.008655e+07</td>\n",
       "      <td>5.315835e+07</td>\n",
       "      <td>8.388287e+06</td>\n",
       "      <td>3.874221e+07</td>\n",
       "      <td>1.555160e+08</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>4.610093e+07</td>\n",
       "      <td>1.029068e+07</td>\n",
       "      <td>5.211839e+07</td>\n",
       "      <td>8.830165e+06</td>\n",
       "      <td>3.877506e+07</td>\n",
       "      <td>1.561152e+08</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021</td>\n",
       "      <td>4.745335e+07</td>\n",
       "      <td>1.057998e+07</td>\n",
       "      <td>5.107502e+07</td>\n",
       "      <td>9.038926e+06</td>\n",
       "      <td>3.880305e+07</td>\n",
       "      <td>1.569503e+08</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022</td>\n",
       "      <td>4.841501e+07</td>\n",
       "      <td>1.078096e+07</td>\n",
       "      <td>5.011462e+07</td>\n",
       "      <td>9.337436e+06</td>\n",
       "      <td>3.883307e+07</td>\n",
       "      <td>1.574811e+08</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023</td>\n",
       "      <td>4.951853e+07</td>\n",
       "      <td>1.101266e+07</td>\n",
       "      <td>4.917845e+07</td>\n",
       "      <td>9.538436e+06</td>\n",
       "      <td>3.886076e+07</td>\n",
       "      <td>1.581088e+08</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2046</td>\n",
       "      <td>1.459660e+08</td>\n",
       "      <td>3.527904e+07</td>\n",
       "      <td>3.796185e+07</td>\n",
       "      <td>2.825003e+07</td>\n",
       "      <td>4.334884e+07</td>\n",
       "      <td>2.908057e+08</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2047</td>\n",
       "      <td>1.546247e+08</td>\n",
       "      <td>3.723611e+07</td>\n",
       "      <td>3.804406e+07</td>\n",
       "      <td>2.963456e+07</td>\n",
       "      <td>4.370675e+07</td>\n",
       "      <td>3.032462e+08</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2048</td>\n",
       "      <td>1.635621e+08</td>\n",
       "      <td>3.924021e+07</td>\n",
       "      <td>3.819754e+07</td>\n",
       "      <td>3.109648e+07</td>\n",
       "      <td>4.407945e+07</td>\n",
       "      <td>3.161758e+08</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2049</td>\n",
       "      <td>1.722594e+08</td>\n",
       "      <td>4.118567e+07</td>\n",
       "      <td>3.846841e+07</td>\n",
       "      <td>3.272559e+07</td>\n",
       "      <td>4.446854e+07</td>\n",
       "      <td>3.291076e+08</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>2050</td>\n",
       "      <td>1.808983e+08</td>\n",
       "      <td>4.311082e+07</td>\n",
       "      <td>3.882851e+07</td>\n",
       "      <td>3.440283e+07</td>\n",
       "      <td>4.487209e+07</td>\n",
       "      <td>3.421125e+08</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Year           AGB           BGB      Deadwood        Litter  \\\n",
       "0   2019  4.514063e+07  1.008655e+07  5.315835e+07  8.388287e+06   \n",
       "1   2020  4.610093e+07  1.029068e+07  5.211839e+07  8.830165e+06   \n",
       "2   2021  4.745335e+07  1.057998e+07  5.107502e+07  9.038926e+06   \n",
       "3   2022  4.841501e+07  1.078096e+07  5.011462e+07  9.337436e+06   \n",
       "4   2023  4.951853e+07  1.101266e+07  4.917845e+07  9.538436e+06   \n",
       "..   ...           ...           ...           ...           ...   \n",
       "91  2046  1.459660e+08  3.527904e+07  3.796185e+07  2.825003e+07   \n",
       "92  2047  1.546247e+08  3.723611e+07  3.804406e+07  2.963456e+07   \n",
       "93  2048  1.635621e+08  3.924021e+07  3.819754e+07  3.109648e+07   \n",
       "94  2049  1.722594e+08  4.118567e+07  3.846841e+07  3.272559e+07   \n",
       "95  2050  1.808983e+08  4.311082e+07  3.882851e+07  3.440283e+07   \n",
       "\n",
       "            Soil  Total Ecosystem  Scenario  \n",
       "0   3.874221e+07     1.555160e+08        -1  \n",
       "1   3.877506e+07     1.561152e+08        -1  \n",
       "2   3.880305e+07     1.569503e+08        -1  \n",
       "3   3.883307e+07     1.574811e+08        -1  \n",
       "4   3.886076e+07     1.581088e+08        -1  \n",
       "..           ...              ...       ...  \n",
       "91  4.334884e+07     2.908057e+08         1  \n",
       "92  4.370675e+07     3.032462e+08         1  \n",
       "93  4.407945e+07     3.161758e+08         1  \n",
       "94  4.446854e+07     3.291076e+08         1  \n",
       "95  4.487209e+07     3.421125e+08         1  \n",
       "\n",
       "[96 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stocks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>AGB</th>\n",
       "      <th>BGB</th>\n",
       "      <th>Deadwood</th>\n",
       "      <th>Litter</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Total Ecosystem</th>\n",
       "      <th>Scenario</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>9.587128e+05</td>\n",
       "      <td>2.043476e+05</td>\n",
       "      <td>-1.040299e+06</td>\n",
       "      <td>4.458754e+05</td>\n",
       "      <td>33049.974730</td>\n",
       "      <td>6.016866e+05</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>1.350651e+06</td>\n",
       "      <td>2.892071e+05</td>\n",
       "      <td>-1.039965e+06</td>\n",
       "      <td>2.098019e+05</td>\n",
       "      <td>28173.676362</td>\n",
       "      <td>8.378685e+05</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>9.518484e+05</td>\n",
       "      <td>1.992411e+05</td>\n",
       "      <td>-9.578365e+05</td>\n",
       "      <td>3.046261e+05</td>\n",
       "      <td>30219.430345</td>\n",
       "      <td>5.280986e+05</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>1.103163e+06</td>\n",
       "      <td>2.320931e+05</td>\n",
       "      <td>-9.367093e+05</td>\n",
       "      <td>2.014862e+05</td>\n",
       "      <td>27734.597669</td>\n",
       "      <td>6.277673e+05</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024</td>\n",
       "      <td>1.026164e+06</td>\n",
       "      <td>2.137390e+05</td>\n",
       "      <td>-9.062663e+05</td>\n",
       "      <td>1.911245e+05</td>\n",
       "      <td>28610.325672</td>\n",
       "      <td>5.533716e+05</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>2046</td>\n",
       "      <td>8.292969e+06</td>\n",
       "      <td>1.890187e+06</td>\n",
       "      <td>1.869218e+04</td>\n",
       "      <td>1.341082e+06</td>\n",
       "      <td>343976.729581</td>\n",
       "      <td>1.188691e+07</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>2047</td>\n",
       "      <td>8.661906e+06</td>\n",
       "      <td>1.957859e+06</td>\n",
       "      <td>7.975046e+04</td>\n",
       "      <td>1.383848e+06</td>\n",
       "      <td>357918.851730</td>\n",
       "      <td>1.244128e+07</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>2048</td>\n",
       "      <td>8.910767e+06</td>\n",
       "      <td>1.998299e+06</td>\n",
       "      <td>1.658827e+05</td>\n",
       "      <td>1.467204e+06</td>\n",
       "      <td>372833.721457</td>\n",
       "      <td>1.291499e+07</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2049</td>\n",
       "      <td>8.663388e+06</td>\n",
       "      <td>1.938492e+06</td>\n",
       "      <td>2.822577e+05</td>\n",
       "      <td>1.636610e+06</td>\n",
       "      <td>389239.147685</td>\n",
       "      <td>1.290999e+07</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>2050</td>\n",
       "      <td>8.619472e+06</td>\n",
       "      <td>1.921057e+06</td>\n",
       "      <td>3.584862e+05</td>\n",
       "      <td>1.680380e+06</td>\n",
       "      <td>403651.873974</td>\n",
       "      <td>1.298305e+07</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Year           AGB           BGB      Deadwood        Litter  \\\n",
       "0   2020  9.587128e+05  2.043476e+05 -1.040299e+06  4.458754e+05   \n",
       "1   2021  1.350651e+06  2.892071e+05 -1.039965e+06  2.098019e+05   \n",
       "2   2022  9.518484e+05  1.992411e+05 -9.578365e+05  3.046261e+05   \n",
       "3   2023  1.103163e+06  2.320931e+05 -9.367093e+05  2.014862e+05   \n",
       "4   2024  1.026164e+06  2.137390e+05 -9.062663e+05  1.911245e+05   \n",
       "..   ...           ...           ...           ...           ...   \n",
       "88  2046  8.292969e+06  1.890187e+06  1.869218e+04  1.341082e+06   \n",
       "89  2047  8.661906e+06  1.957859e+06  7.975046e+04  1.383848e+06   \n",
       "90  2048  8.910767e+06  1.998299e+06  1.658827e+05  1.467204e+06   \n",
       "91  2049  8.663388e+06  1.938492e+06  2.822577e+05  1.636610e+06   \n",
       "92  2050  8.619472e+06  1.921057e+06  3.584862e+05  1.680380e+06   \n",
       "\n",
       "             Soil  Total Ecosystem  Scenario  \n",
       "0    33049.974730     6.016866e+05        -1  \n",
       "1    28173.676362     8.378685e+05        -1  \n",
       "2    30219.430345     5.280986e+05        -1  \n",
       "3    27734.597669     6.277673e+05        -1  \n",
       "4    28610.325672     5.533716e+05        -1  \n",
       "..            ...              ...       ...  \n",
       "88  343976.729581     1.188691e+07         1  \n",
       "89  357918.851730     1.244128e+07         1  \n",
       "90  372833.721457     1.291499e+07         1  \n",
       "91  389239.147685     1.290999e+07         1  \n",
       "92  403651.873974     1.298305e+07         1  \n",
       "\n",
       "[93 rows x 8 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fluxes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot Fluxes for Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1. Limit Year Range\n",
    "data_to_plot = fluxes[(fluxes['Year'] >= 2020) & (fluxes['Year'] <= 2030)] \n",
    "\n",
    "# 2. Select Scenario \n",
    "scenario_to_plot = -1\n",
    "data_to_plot = data_to_plot[data_to_plot['Scenario'] == scenario_to_plot]\n",
    "\n",
    "# 3. Plotting\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['AGB'], label='AGB')\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['BGB'], label='BGB')\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['Deadwood'], label='Deadwood')\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['Litter'], label='Litter')\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['Soil'], label='Soil')\n",
    "plt.plot(data_to_plot['Year'], data_to_plot['Total Ecosystem'], label='Total Ecosystem')\n",
    "\n",
    "# 4. Customization\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('tCarbon') \n",
    "plt.title(f'Carbon Dynamics - Scenario {scenario_to_plot}')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deleted file: ./jupyter_example/c_flux.csv\n",
      "Deleted file: ./jupyter_example/c_stock.csv\n"
     ]
    }
   ],
   "source": [
    "# Remove Generated files \n",
    "\n",
    "for filename in os.listdir(data_path):\n",
    "    file_path = os.path.join(data_path, filename)\n",
    "    try:\n",
    "        if os.path.isfile(file_path):\n",
    "            os.remove(file_path)\n",
    "            print(f\"Deleted file: {file_path}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error deleting file: {file_path}. Reason: {e}\")\n",
    "        \n",
    "#Remove direcotry \n",
    "os.rmdir(data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "mystnb": {
   "execution_timeout": 600
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

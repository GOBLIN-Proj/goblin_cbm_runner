:py:mod:`goblin_cbm_runner.cbm.data_processing.geo_processing.geo_cbm_data_factory`
===================================================================================

.. py:module:: goblin_cbm_runner.cbm.data_processing.geo_processing.geo_cbm_data_factory

.. autoapi-nested-parse::

   Geo Data Factory
   =================

   The ``DataFactory`` class is designed to generate and manage input data required for running Carbon Budget Model (CBM) simulations,
   focusing on geospatially specific catchment data for scenarios including afforestation, disturbances, and transitions.
   This class serves as a central hub for preparing, organizing, and storing various types of input data crucial for CBM simulation accuracy and efficiency.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_cbm_runner.cbm.data_processing.geo_processing.geo_cbm_data_factory.DataFactory




.. py:class:: DataFactory(geo_data_manager)


   Generates and manages input data required for running Carbon Budget Model (CBM) simulations,
   focusing on geospatially specific catchment data for scenarios including afforestation, disturbances,
   and transitions. This class serves as a central hub for preparing, organizing, and storing
   various types of input data crucial for CBM simulation accuracy and efficiency.

   The DataFactory is designed to interact seamlessly with the GeoDataManager for data retrieval
   and management, leveraging a suite of tools and modules for detailed environmental simulation
   tasks. It automates the creation of necessary directories, configuration files, and CSV inputs
   for classifiers, age classes, yield curves, inventories, disturbance events, disturbance types,
   and transition rules tailored to specific simulation scenarios.

   Parameters:
   - geo_data_manager (GeoDataManager): Instance responsible for managing geospatial data.

   Attributes:
   - loader_class (Loader): Instance responsible for loading external resources or data.
   - data_manager_class (GeoDataManager): Manages retrieval and organization of geospatial data.
   - json_creator_class (CreateJSON): Constructs JSON files for CBM configuration.
   - inventory_class (Inventory): Prepares inventory data for simulations.
   - FM_disturbance_class (FMDisturbances): Manages data related to forest management disturbances.
   - SC_disturbance_class (SCDisturbances): Manages data related to scenario-specific disturbances.
   - transition_class (Transition): Handles transition rule data for forest change modeling.
   - afforestation_data (dict): Stores afforestation data for use in simulations.

   Methods:
   - set_input_data_dir(sc, path, db_path): Configures the directory path for scenario-specific input data.
   - set_baseline_input_data_dir(path, db_path): Establishes the directory path for baseline simulation input data.
   - set_spinup_baseline_input_data_dir(path, db_path): Sets the input data directory for the baseline spinup, initializes the CBM simulation data.
   - make_data_dirs(scenarios, path): Generates directories for each specified simulation scenario.
   - clean_data_dir(path): Removes all data within a specified directory, preparing it for fresh data.
   - clean_baseline_data_dir(path): Clears the baseline data directory of all files except essential ones.
   - make_config_json(scenario, path): Creates a JSON file for CBM configuration based on a given scenario.
   - make_classifiers(scenario, path): Generates a CSV file detailing classifiers relevant to the scenario.
   - make_age_classes(scenario, path): Produces a CSV file outlining age classes for forest simulation.
   - make_yield_curves(scenario, path): Compiles yield curve data into a CSV for simulation input.
   - make_inventory(scenario, path): Prepares and saves inventory data as a CSV file for a given scenario.
   - make_disturbance_events(scenario, path): Constructs a CSV file detailing disturbance events per scenario.
   - make_disturbance_type(scenario, path): Creates a CSV file defining types of disturbances for modeling.
   - make_transition_rules(scenario, path): Generates a CSV file with transition rules for forest dynamics.

   .. py:method:: set_input_data_dir(sc, path, db_path)

      Sets the input data directory for a scenario, initializes the CBM simulation data.

      This method loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str
      :param db_path: The path to the database.
      :type db_path: str

      :returns:

                A tuple containing the following:
                    * SIT object: The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_baseline_input_data_dir(path, db_path)

      Sets the input data directory for the baseline, initializes the CBM simulation data.

      This method loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param path: The path to the input data directory.
      :type path: str
      :param db_path: The path to the database.
      :type db_path: str

      :returns:

                A tuple containing the following:
                    * SIT object: The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_spinup_baseline_input_data_dir(path, db_path)

      Sets the input data directory for the baseline spinup, initializes the CBM simulation data.

      This method loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param path: The path to the input data directory.
      :type path: str
      :param db_path: The path to the database.
      :type db_path: str

      :returns:

                A tuple containing the following:
                    * SIT object: The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_input_data_dir(sc, path, db_path)

      Sets the input data directory for a scenario, initializes the CBM simulation data.

      This method loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str

      :returns:

                A tuple containing the following:
                    * SIT object:  The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_baseline_input_data_dir(path, db_path)

      Sets the input data directory for the baseline, initializes the CBM simulation data.

      This method loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param path: The path to the input data directory.
      :type path: str

      :returns:

                A tuple containing the following:
                    * SIT object:  The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: make_data_dirs(scenarios, path)

      Creates data directories for each specified simulation scenario.

      :param scenarios: A list of scenario numbers.
      :type scenarios: list
      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_data_dir(path)

      Cleans the data directory by removing all subdirectories.

      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_baseline_data_dir(path)

      Cleans the baseline data directory by removing all files except essential ones.

      :param path: The path to the baseline data directory.
      :type path: str


   .. py:method:: make_config_json(scenario, path)

      Creates the configuration JSON file for a given scenario.

      :param scenario: The scenario number. If None, creates the baseline configuration.
      :type scenario: int or None
      :param path: The path to the output directory.
      :type path: str


   .. py:method:: make_classifiers(scenario, path)

      Generates a dataframe of classifiers and saves it as a CSV file.

      Parameters:
      - scenario (str or None): The scenario name. If None, generates classifiers for the baseline.
      - path (str): The path where the CSV file will be saved.

      Returns:
      None


   .. py:method:: make_age_classes(scenario, path)

      Creates age classes DataFrame and saves it as a CSV file.

      :param scenario: The scenario name. If None, creates age classes for the baseline.
      :type scenario: str or None
      :param path: The path where the CSV file will be saved.
      :type path: str

      :returns: None


   .. py:method:: gen_yield_dataframe(classifiers, yield_df)


   .. py:method:: make_yield_curves(scenario, path)

      Creates the yield curves CSV file.

      :param scenario: The scenario number. If None, creates yield curves for the baseline.
      :type scenario: int or None
      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_inventory(scenario, path)

      Creates an inventory DataFrame based on the given scenario and path.

      :param scenario: The scenario for which the inventory is created. If None, creates inventory for the baseline.
      :type scenario: str or None
      :param path: The path where the inventory file will be saved.
      :type path: str

      :returns: The created inventory DataFrame.
      :rtype: pandas.DataFrame


   .. py:method:: make_disturbance_events(scenario, path)

      Generates disturbance events data and saves it as a CSV file.

      :param scenario: The scenario name. If None, generates disturbance events for the baseline.
      :type scenario: str or None
      :param path: The path to save the disturbance events CSV file.
      :type path: str

      :returns: None


   .. py:method:: make_disturbance_type(scenario, path)

      Creates a disturbance type CSV file based on the given scenario and saves it to the specified path.

      Parameters:
      - scenario (str or None): The scenario for which the disturbance type CSV file is created. If None, uses the baseline disturbance types.
      - path (str): The path where the disturbance type CSV file is saved.

      Returns:
      None


   .. py:method:: make_transition_rules(scenario, path)

      Generates transition rules based on the given scenario and saves them to a CSV file.

      :param scenario: The scenario for which the transition rules are generated. If None, generates transition rules for the baseline.
      :type scenario: str or None
      :param path: The path where the CSV file should be saved.
      :type path: str

      :returns: None




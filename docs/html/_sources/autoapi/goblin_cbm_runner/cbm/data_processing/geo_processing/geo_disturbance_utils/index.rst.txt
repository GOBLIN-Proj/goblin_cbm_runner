:py:mod:`goblin_cbm_runner.cbm.data_processing.geo_processing.geo_disturbance_utils`
====================================================================================

.. py:module:: goblin_cbm_runner.cbm.data_processing.geo_processing.geo_disturbance_utils

.. autoapi-nested-parse::

   Geo Disturbance Utils
   =====================

   This module contains the GeoDisturbUtils class, which is used to process disturbance data for the CBM model.
   It provides methods to create disturbance data structures, process scenario harvest data, drop zero area rows,
   generate classifier combinations, handle afforestation scenarios, and update disturbance timing.

   Classes:
       GeoDisturbUtils: A utility class for processing disturbance data.

   .. method:: disturbance_structure

      Creates a dataframe structure for disturbances.

   .. method:: _process_scenario_harvest_data

      Processes the harvest data for a scenario.

   .. method:: _drop_zero_area_rows

      Drops rows from the disturbance dataframe where the 'Amount' column is zero.

   .. method:: _get_legacy_classifier_combinations

      Returns all possible combinations of forest keys, soil keys, and yield keys.

   .. method:: _get_scenario_classifier_combinations

      Generates combinations of scenario, forest, soil, and yield classifiers.

   .. method:: _get_classifier_combinations

      Generates all possible combinations of forest types, soil classes, and yield classes.

   .. method:: _get_static_defaults

      Gets the default values for static disturbance columns.

   .. method:: _generate_row

      Generates a row of data for a disturbance event.

   .. method:: _process_scenario_row_data

      Processes the row data for a scenario based on the given context and dataframes.

   .. method:: _handle_legacy_scenario_forest

      Handles the legacy scenario forest by updating the disturbance timing and setting the amount based on the area.

   .. method:: _handle_scenario_afforestation

      Handles the scenario of afforestation.

   .. method:: _update_disturbance_timing

      Retrieves disturbance timing information from the disturbance_timing DataFrame.

   .. method:: get_legacy_forest_area_breakdown

      Calculates the breakdown of legacy forest area based on species, yield class, soil type, and age.

   .. method:: legacy_disturbance_tracker

      Applies legacy disturbances to the forest and returns a disturbance dataframe.

   .. method:: update_disturbance_row

      Updates a single row with the correct disturbance timing information.

   .. method:: format_disturbance_data

      Formats the tracked disturbance data dynamically, ensuring all required columns exist and retrieving timing constraints from `disturbance_timing`.
      



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_cbm_runner.cbm.data_processing.geo_processing.geo_disturbance_utils.GeoDisturbUtils




.. py:class:: GeoDisturbUtils(geo_data_manager)


   .. py:method:: disturbance_structure()

      Creates a dataframe structure for disturbances.

      :returns: A dataframe with the structure for disturbances.
      :rtype: DataFrame


   .. py:method:: _process_scenario_harvest_data(tracker, row_data, context)

      Processes the harvest data for a scenario.

      :param tracker: The tracker object used to track forest changes.
      :type tracker: Tracker
      :param row_data: The data for a single row.
      :type row_data: dict
      :param context: The context containing additional information.
      :type context: dict

      :returns: None


   .. py:method:: _drop_zero_area_rows(disturbance_df)

      Drops rows from the disturbance dataframe where the 'Amount' column is zero.

      :param disturbance_df: The disturbance dataframe.
      :type disturbance_df: pandas.DataFrame

      :returns: The disturbance dataframe with zero area rows dropped.
      :rtype: pandas.DataFrame


   .. py:method:: _get_legacy_classifier_combinations()

      Returns all possible combinations of forest keys, soil keys, and yield keys.

      :returns: A generator that yields all possible combinations of forest keys, soil keys, and yield keys.
      :rtype: combinations (generator)


   .. py:method:: _get_scenario_classifier_combinations(species)

      Generates combinations of scenario, forest, soil, and yield classifiers.

      :param species: The species of the forest.
      :type species: str

      :returns: A generator that yields combinations of scenario, forest, soil, and yield classifiers.
      :rtype: generator


   .. py:method:: _get_classifier_combinations(species, disturbance=None)

      Generates all possible combinations of forest types, soil classes, and yield classes.

      :param species: The species of the forest.
      :type species: str
      :param disturbance: The disturbance type ID.
      :type disturbance: str, optional

      :returns: A generator that yields tuples representing the combinations of forest types, soil classes, and yield classes.
      :rtype: generator


   .. py:method:: _get_static_defaults()

      Gets the default values for static disturbance columns.

      :returns: A dictionary containing the default values for each static disturbance column.
      :rtype: dict


   .. py:method:: _generate_row(species, forest_type, soil, yield_class, dist, yr, amount=0)

      Generates a row of data for a disturbance event.

      :param species: The species of the forest.
      :type species: str
      :param forest_type: The type of forest.
      :type forest_type: str
      :param soil: The type of soil.
      :type soil: str
      :param yield_class: The yield class of the forest.
      :type yield_class: str
      :param dist: The disturbance type ID.
      :type dist: int
      :param yr: The year of the disturbance event.
      :type yr: int
      :param amount: The amount of disturbance. Defaults to 0.
      :type amount: float, optional

      :returns: A dictionary containing the row data for the disturbance event.
      :rtype: dict


   .. py:method:: _process_scenario_row_data(row_data, context, dataframes)

      Processes the row data for a scenario based on the given context and dataframes.

      :param row_data: The row data for the scenario.
      :type row_data: dict
      :param context: The context containing forest type and disturbance information.
      :type context: dict
      :param dataframes: The dataframes containing relevant data.
      :type dataframes: dict

      :returns: None


   .. py:method:: _handle_legacy_scenario_forest(row_data, context, dataframes)

      Handles the legacy scenario forest by updating the disturbance timing and setting the amount based on the area.

      :param row_data: The row data for the disturbance.
      :type row_data: dict
      :param context: The context information for the disturbance.
      :type context: dict
      :param dataframes: The dataframes containing additional data.
      :type dataframes: dict

      :returns: None


   .. py:method:: _handle_scenario_afforestation(row_data, context, dataframes)

      Handles the scenario of afforestation.

      This method calculates the amount of afforestation based on the given row data, context, and dataframes.
      It retrieves the afforestation inventory, non-forest dictionary, species, yield class, soil, and configuration classifiers from the context and dataframes.
      The amount of afforestation is calculated based on the afforestation value, yield class proportions, and classifier3 value.
      If the classifier3 value matches the soil value, the amount is calculated using the afforestation value and yield class proportions.
      If there is a TypeError during the calculation, the amount is set to 0.
      If the classifier3 value does not match the soil value, the amount is set to 0.

      Parameters:
      - row_data (dict): The row data for the afforestation scenario.
      - context (dict): The context containing additional information for the calculation.
      - dataframes (dict): The dataframes containing the afforestation inventory.

      Returns:
      - None


   .. py:method:: _update_disturbance_timing(row_data, context, dataframes)

      Retrieves disturbance timing information from the disturbance_timing DataFrame.

      :param row_data: The dictionary containing row data.
      :type row_data: dict
      :param context: The dictionary containing context information.
      :type context: dict
      :param dataframes: The dictionary containing dataframes.
      :type dataframes: dict

      :returns: None

      :raises ValueError: If any of the operations fail due to invalid values.
      :raises KeyError: If any of the required keys are not found.


   .. py:method:: get_legacy_forest_area_breakdown(inventory_class)

      Calculates the breakdown of legacy forest area based on species, yield class, soil type, and age.

      :param inventory_class: The forest inventory class.
      :type inventory_class: str

      :returns: DataFrame containing the breakdown of legacy forest area.
      :rtype: pandas.DataFrame


   .. py:method:: legacy_disturbance_tracker(inventory_class, year)

      Applies legacy disturbances to the forest and returns a disturbance dataframe.

      :param inventory_class: The forest inventory class.
      :type inventory_class: str
      :param year: The year to apply disturbances.
      :type year: int

      :returns: A dataframe containing disturbance events.
      :rtype: pd.DataFrame


   .. py:method:: update_disturbance_row(row, disturbance_timing_df)

      Updates a single row with the correct disturbance timing information.

      :param row: A single row from the disturbance DataFrame.
      :type row: pandas.Series
      :param disturbance_timing_df: The disturbance timing reference.
      :type disturbance_timing_df: pandas.DataFrame

      :returns: The updated row.
      :rtype: pandas.Series


   .. py:method:: format_disturbance_data(disturbance_df, disturbance_timing_df)

      Formats the tracked disturbance data dynamically, ensuring all required columns exist
      and retrieving timing constraints from `disturbance_timing`.

      :param disturbance_df: The raw disturbance data.
      :type disturbance_df: pandas.DataFrame
      :param disturbance_timing_df: The disturbance timing reference.
      :type disturbance_timing_df: pandas.DataFrame

      :returns: A formatted disturbance dataframe with correct age constraints.
      :rtype: pandas.DataFrame




:py:mod:`goblin_cbm_runner.cbm.data_processing.default_processing.AF_inventory`
===============================================================================

.. py:module:: goblin_cbm_runner.cbm.data_processing.default_processing.AF_inventory

.. autoapi-nested-parse::

   Afforesation Inventory Module
   ==============================
   This module is responsible for managing historic afforestation inventory data for forest simulation in a CBM (Carbon Budget Modeling) context.
   It handles the creation and structuring of inventory data for both baseline and scenario-based simulations.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_cbm_runner.cbm.data_processing.default_processing.AF_inventory.AFInventory




.. py:class:: AFInventory(calibration_year, config_path)


   Manages the inventory data for forest simulation in a CBM (Carbon Budget Modeling) context.

   This class is responsible for managing and processing inventory data, including legacy forest inventory and afforestation data. It handles the creation and structuring of inventory data for both baseline and scenario-based simulations.

   .. attribute:: loader_class

      Instance of the Loader class for loading various data.

      :type: Loader

   .. attribute:: data_manager_class

      Instance of the DataManager class for managing configuration and data retrieval.

      :type: DataManager

   .. attribute:: afforestation_data

      Data related to afforestation events.

      :type: dict

   .. attribute:: age_df

      Data structure containing information about forest age.

      :type: DataFrame

   .. attribute:: baseline_forest_classifiers

      Classifiers for the baseline forest scenario.

      :type: dict

   .. attribute:: scenario_forest_classifiers

      Classifiers for different scenario-based forests.

      :type: dict

   .. attribute:: legacy_year

      The calibration year.

      :type: int

   .. attribute:: soils_dict

      Dictionary containing information about different soil types.

      :type: dict

   .. attribute:: yield_baseline_dict

      Dictionary mapping yield classes to their respective baseline proportions nationally.

      :type: dict

   .. method:: make_inventory_structure

      Creates an inventory structure based on the given scenario and parameters.

   .. method:: afforestation_inventory

      Calculate the afforestation inventory based on the given scenario and inventory dataframe.

   .. method:: legacy_afforestation

      Calculate the afforestation areas for legacy years.

   .. method:: legacy_afforestation_annual

      Calculate the annual afforestation for legacy years.

   .. method:: afforestation_annual_dict

      Generate a dictionary containing annual afforestation data.
      
      

   .. py:method:: make_inventory_structure(scenario, path, ID='False', delay=0, UNFCCCLC=2)

      Creates an inventory structure based on the given scenario and parameters.

      :param scenario: The scenario for which the inventory is being created.
      :type scenario: str
      :param path: The path where the inventory will be saved.
      :type path: str
      :param ID: Fills the UsingID column, defaults to False.
      :type ID: str, optional
      :param delay: The delay in years for the inventory. Defaults to 0.
      :type delay: int, optional
      :param UNFCCCLC: The UNFCCC land class code for the inventory. Defaults to 2.
      :type UNFCCCLC: int, optional

      :returns: The inventory structure as a DataFrame.
      :rtype: pandas.DataFrame


   .. py:method:: afforestation_inventory(scenario, path)

      Calculate the afforestation inventory based on the given scenario and inventory dataframe.

      :param scenario: The scenario for which the afforestation inventory is calculated.
      :type scenario: str
      :param inventory_df: The inventory dataframe containing the classifier information.
      :type inventory_df: pd.DataFrame

      :returns: The updated inventory dataframe with afforestation areas calculated.
      :rtype: pd.DataFrame


   .. py:method:: legacy_afforestation()

      Calculate the afforestation areas for legacy years.

      Returns a dictionary containing the sum of afforestation areas for peat and mineral soils,
      grouped by yield class.

      :returns:

                A dictionary with the following structure:
                    {
                        "peat_afforestation": {
                            yield_class: {
                                col1: sum1,
                                col2: sum2,
                                ...
                            },
                            ...
                        },
                        "mineral_afforestation": {
                            yield_class: {
                                col1: sum1,
                                col2: sum2,
                                ...
                            },
                            ...
                        }
                    }
      :rtype: dict


   .. py:method:: legacy_afforestation_annual()

      Calculate the annual afforestation for legacy years.

      :returns:

                A dictionary containing the annual afforestation data for peat and mineral soils.
                    The dictionary has the following keys:
                    - "peat_afforestation": A DataFrame containing the annual afforestation data for peat soils.
                    - "mineral_afforestation": A DataFrame containing the annual afforestation data for mineral soils.
      :rtype: dict


   .. py:method:: afforestation_annual_dict(afforestation_df)

      Generate a dictionary containing annual afforestation data.

      :param afforestation_df: DataFrame containing afforestation data.
      :type afforestation_df: pandas.DataFrame

      :returns:

                A dictionary with the following structure:
                    {
                        year1: {
                            species1: {
                                yield_class1: total1,
                                yield_class2: total2,
                                ...
                            },
                            species2: {
                                yield_class1: total1,
                                yield_class2: total2,
                                ...
                            },
                            ...
                        },
                        year2: {
                            ...
                        },
                        ...
                    }
                The dictionary contains the sum of afforestation values for each species and yield class
                for each year in the input DataFrame.
      :rtype: dict




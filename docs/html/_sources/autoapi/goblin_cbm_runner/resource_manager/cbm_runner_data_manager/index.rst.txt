:py:mod:`goblin_cbm_runner.resource_manager.cbm_runner_data_manager`
====================================================================

.. py:module:: goblin_cbm_runner.resource_manager.cbm_runner_data_manager

.. autoapi-nested-parse::

   CBM Runner Data Manager
   =======================
   This module contains the DataManager class, which manages data for the CBM Runner.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_cbm_runner.resource_manager.cbm_runner_data_manager.DataManager




.. py:class:: DataManager(calibration_year, config_file_path, scenario_data, afforest_data, sit_path=None)


   Manages data for CBM Runner.

   .. attribute:: config_data

      Configuration data from a YAML file.

      :type: dict

   .. attribute:: forest_baseline_year

      Baseline year for forest data.

      :type: int

   .. attribute:: afforestation_baseline

      Baseline year for afforestation.

      :type: int

   .. attribute:: cbm_default_config

      Default CBM configuration.

      :type: dict

   .. attribute:: non_forest_dict

      Non-forest dictionary for afforestation types.

      :type: dict

   .. attribute:: non_forest_soils

      Non-forest soils types.

      :type: dict

   .. attribute:: forest_type_keys

      Forest type keys from CBM default configuration.

      :type: dict

   .. attribute:: soils_dict

      Soils dictionary from CBM default configuration.

      :type: dict

   .. attribute:: classifiers

      Classifiers from CBM default configuration.

      :type: dict

   .. attribute:: disturbances_config

      Disturbances configuration from CBM default configuration.

      :type: dict

   .. attribute:: yield_name_dict

      Species yield name dictionary from CBM default configuration.

      :type: dict

   .. attribute:: species_name_dict

      Species name dictionary from CBM default configuration.

      :type: dict

   .. attribute:: afforestation_yield_name_dict

      Afforestation yield name dictionary from CBM default configuration.

      :type: dict

   .. attribute:: yield_baseline_dict

      Yield baseline dictionary from CBM default configuration.

      :type: dict

   .. attribute:: disturbance_cols

      Disturbance columns from CBM default configuration.

      :type: dict

   .. attribute:: static_disturbance_cols

      Static disturbance columns from CBM default configuration.

      :type: dict

   .. attribute:: transition_cols

      Transition columns from CBM default configuration.

      :type: dict

   .. attribute:: mapping

      AIDB mapping from CBM default configuration.

      :type: dict

   .. attribute:: scenario_data

      Scenario data.

      :type: DataFrame

   .. attribute:: scenario_disturbance_dict

      Scenario disturbance dictionary.

      :type: dict

   .. attribute:: transition_dicts

      Transition dictionaries from CBM default configuration.

      :type: dict

   .. attribute:: sort_dict

      Sort type dictionary from CBM default configuration.

      :type: dict

   :param calibration_year: Year used for calibration.
   :type calibration_year: int
   :param config_file_path: Path to the configuration file.
   :type config_file_path: str
   :param scenario_data: Dataframe containing scenario data.
   :type scenario_data: DataFrame
   :param afforest_data: Dataframe containing afforestation data.
   :type afforest_data: DataFrame
   :param sit_path: Path to the SIT file. Defaults to None.
   :type sit_path: str, optional

   .. py:method:: get_config_file_path()

      Get the path to the configuration file.

      :returns: Path to the configuration file.
      :rtype: str


   .. py:method:: get_sit_path()

      Get the path to the SIT file.

      :returns: Path to the SIT file.
      :rtype: str


   .. py:method:: get_forest_management_intensity()

      Get the forest management intensity.

      :returns: Forest management intensity.
      :rtype: dict


   .. py:method:: get_afforest_data()

      Get the afforestation data.

      :returns: Afforestation data.
      :rtype: DataFrame


   .. py:method:: get_config_data(config_file)

      Load and return the configuration data from the specified file.

      :param config_file: Path to the configuration file.
      :type config_file: str

      :returns: Configuration data loaded from the file.
      :rtype: dict


   .. py:method:: get_non_forest_dict()

      Retrieve the non-forest dictionary.

      :returns: Non-forest dictionary.
      :rtype: dict


   .. py:method:: get_non_forest_soils()

      Retrieve the non-forest soils dictionary.

      :returns: Non-forest soils dictionary.
      :rtype: dict


   .. py:method:: get_forest_type_keys()

      Retrieve the forest type dictionary.

      :returns: Forest type dictionary.
      :rtype: dict


   .. py:method:: get_soils_dict()

      Retrieve the soils dictionary.

      :returns: Soils dictionary.
      :rtype: dict


   .. py:method:: get_classifiers()

      Retrieve the classifiers dictionary.

      :returns: Classifiers dictionary.
      :rtype: dict


   .. py:method:: get_disturbances_config()

      Retrieve the disturbance ID dictionary for scenarios and baseline.

      :returns: Disturbance ID dictionary.
      :rtype: dict


   .. py:method:: get_yield_name_dict()

      Retrieve the yield name dictionary.

      :returns: Yield name dictionary.
      :rtype: dict


   .. py:method:: get_species_name_dict()

      Get the dictionary mapping species IDs to their names.

      :returns: Dictionary where keys are species growth curve IDs and values are species names.
      :rtype: dict


   .. py:method:: get_afforestation_yield_name_dict()

      Return the dictionary containing the names of afforestation yield classes.

      :returns: Dictionary containing the names of afforestation yield classes.
      :rtype: dict


   .. py:method:: get_yield_baseline_dict()

      Return the yield baseline dictionary.

      :returns: Yield baseline dictionary where keys are yield classes and values are the proportions of that yield class nationally.
      :rtype: dict


   .. py:method:: get_disturbance_cols()

      Return the disturbance columns used in the disturbance dataframe generator.

      :returns: List of disturbance columns.
      :rtype: list


   .. py:method:: get_static_disturbance_cols()

      Return the static disturbance columns used in the disturbance dataframe generator.

      :returns: List of static disturbance columns.
      :rtype: list


   .. py:method:: get_transition_cols()

      Return the transition columns used in the transition dataframe generator.

      :returns: List of transition columns.
      :rtype: list


   .. py:method:: get_transition_dict_species()

      Return the transition dictionaries used in the transition dataframe generator.

      :returns: Dictionary of transition dictionaries.
      :rtype: dict


   .. py:method:: get_transition_dict_species_to_yield()

      Get the transition dictionaries.

      :returns: The transition dictionaries.
      :rtype: dict


   .. py:method:: get_mapping()

      Return the mapping used by the data manager to map parameters to the CBM AIDB.

      :returns: Mapping used by the data manager.
      :rtype: dict


   .. py:method:: get_calibration_year()

      Get the calibration year.

      :returns: Calibration year.
      :rtype: int


   .. py:method:: get_forest_baseline_year()

      Get the forest baseline year, which is equal to the calibration year.

      :returns: Forest baseline year.
      :rtype: int


   .. py:method:: get_afforestation_baseline()

      Return the afforestation baseline, default is 1990.

      :returns: Afforestation baseline (1990).
      :rtype: int


   .. py:method:: get_forest_end_year()

      Get the forest end year.

      :returns: Forest end year.
      :rtype: int


   .. py:method:: get_scenario_data()

      Return the goblin scenario data, used to retrieve the harvest and thinning proportions for scenarios.

      :returns: Scenario data.
      :rtype: DataFrame


   .. py:method:: get_scenario_disturbance_dict()

      Return the scenario and baseline disturbance ID dictionary.

      :returns: Scenario and baseline disturbance ID dictionary.
      :rtype: dict


   .. py:method:: gen_scenario_disturbance_dict(scenario_data)

      Generate a dictionary of disturbance data for each scenario.

      :param scenario_data: Input scenario data.
      :type scenario_data: DataFrame

      :returns: Dictionary containing disturbance data for each scenario.
      :rtype: dict


   .. py:method:: get_baseline_disturbance_dict(scenario_dist)

      Get the baseline disturbance dictionary. This is added to the scenario disturbance dictionary.

      :param scenario_dist: Scenario disturbance dictionary.
      :type scenario_dist: dict

      :returns: Updated scenario disturbance dictionary with baseline disturbances.
      :rtype: dict


   .. py:method:: get_full_scenario_years(forestry_end_year)

      Get total number of scenario years from 1990.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Number of years in the scenario.
      :rtype: int


   .. py:method:: calculate_scenario_years(forestry_end_year)

      Calculate the number of years in the scenario from the calibration year.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Number of years in the scenario.
      :rtype: int


   .. py:method:: calculate_scenario_years_range(forestry_end_year)

      Calculate the range of years in the scenario from the calibration year.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Range of years in the scenario.
      :rtype: list


   .. py:method:: get_full_scenario_years_range(forestry_end_year)

      Get the scenario years range, including afforestation from 1990.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Range of years in the scenario.
      :rtype: list


   .. py:method:: get_baseline_years(forestry_end_year)

      Get the baseline years.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Number of years in the baseline.
      :rtype: int


   .. py:method:: get_baseline_years_range(forestry_end_year)

      Get the baseline years range.

      :param forestry_end_year: Year at the end of the scenario.
      :type forestry_end_year: int

      :returns: Range of years in the baseline.
      :rtype: list


   .. py:method:: get_afforest_delay()

      Get the afforestation delay.

      :returns: Afforestation delay.
      :rtype: int


   .. py:method:: get_annual_afforestation_rate()

      Get the annual afforestation rate for delay years.

      :returns: Annual afforestation rate.
      :rtype: float


   .. py:method:: get_afforestation_species_distribution(species)

      Get the afforestation rate species distribution.

      :param species: Species name.
      :type species: str

      :returns: Afforestation rate species distribution.
      :rtype: float


   .. py:method:: get_sort_dict()

      Get the sort dictionary.

      :returns: Sort dictionary.
      :rtype: dict




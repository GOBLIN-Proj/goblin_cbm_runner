:py:mod:`cbm_runner.forestsim_factory`
======================================

.. py:module:: cbm_runner.forestsim_factory


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cbm_runner.forestsim_factory.ForestSimFactory




.. py:class:: ForestSimFactory(config_path, calibration_year, forest_end_year, afforestation_data, afforest_data_annual, scenario_data)


   A factory class for creating and managing forest simulation data in a CBM context.

   This class is used when annual afforesation has been specified for each year.

   This class serves as a central point for managing the creation and organization of various data files
   necessary for running forest simulations, including configuration files, classifiers, age classes,
   yield curves, disturbance types, transition rules, inventory, and disturbance events.

   :param config_path: The path to the configuration file.
   :type config_path: str
   :param calibration_year: The year used for calibration.
   :type calibration_year: int
   :param forest_end_year: The final year of the forest simulation.
   :type forest_end_year: int
   :param afforestation_data: The afforestation data.
   :type afforestation_data: pd.DataFrame
   :param afforest_data_annual: The annual afforestation data.
   :type afforest_data_annual: pd.DataFrame
   :param scenario_data: The scenario data.
   :type scenario_data: pd.DataFrame

   .. attribute:: DataFactory

      An instance of the DataFactory class.

      :type: DataFactory

   .. attribute:: disturbance_class

      An instance of the ForestSimDistrubances class.

      :type: ForestSimDistrubances

   .. method:: set_input_data_dir(sc, path)

      Set the input data directory for a specific scenario.

   .. method:: set_baseline_input_data_dir(path)

      Set the input data directory for the baseline scenario.

   .. method:: make_data_dirs(scenarios, path)

      Create data directories for specified scenarios.

   .. method:: clean_data_dir(path)

      Clean the data directory.

   .. method:: clean_baseline_data_dir(path)

      Clean the baseline data directory.

   .. method:: make_config_json(scenario, path)

      Create configuration JSON for a specific scenario.

   .. method:: make_classifiers(scenario, path)

      Create classifiers file for a specific scenario.

   .. method:: make_age_classes(scenario, path)

      Create age classes file for a specific scenario.

   .. method:: make_yield_curves(scenario, path)

      Create yield curves file for a specific scenario.

   .. method:: make_disturbance_type(scenario, path)

      Create disturbance type file for a specific scenario.

   .. method:: make_transition_rules(scenario, path)

      Create transition rules file for a specific scenario.

   .. method:: make_inventory(scenario, path)

      Create inventory file for a specific scenario.

   .. method:: make_disturbance_events(scenario, path)

      Create disturbance events file for a specific scenario.
      

   .. py:method:: set_input_data_dir(sc, path)

      Set the input data directory for a specific scenario.

      :param sc: The scenario identifier.
      :type sc: str
      :param path: The path to the input data directory.
      :type path: str


   .. py:method:: set_baseline_input_data_dir(path)

      Set the input data directory for the baseline scenario.

      :param path: The path to the input data directory.
      :type path: str


   .. py:method:: make_data_dirs(scenarios, path)

      Create data directories for the specified scenarios.

      :param scenarios: A list of scenario identifiers.
      :type scenarios: list
      :param path: The path to the data directories.
      :type path: str


   .. py:method:: clean_data_dir(path)

      Clean the data directory.

      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_baseline_data_dir(path)

      Clean the baseline data directory.

      :param path: The path to the baseline data directory.
      :type path: str


   .. py:method:: make_config_json(scenario, path)

      Create the configuration JSON file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the configuration JSON file.
      :type path: str


   .. py:method:: make_classifiers(scenario, path)

      Create the classifiers file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the classifiers file.
      :type path: str


   .. py:method:: make_age_classes(scenario, path)

      Create the age classes file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the age classes file.
      :type path: str


   .. py:method:: make_yield_curves(scenario, path)

      Create the yield curves file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the yield curves file.
      :type path: str


   .. py:method:: make_disturbance_type(scenario, path)

      Create the disturbance type file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the disturbance type file.
      :type path: str


   .. py:method:: make_transition_rules(scenario, path)

      Create the transition rules file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the transition rules file.
      :type path: str


   .. py:method:: make_inventory(scenario, path)

      Create the inventory file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the inventory file.
      :type path: str


   .. py:method:: make_disturbance_events(scenario, path)

      Create the disturbance events file for a specific scenario.

      :param scenario: The scenario identifier.
      :type scenario: str
      :param path: The path to save the disturbance events file.
      :type path: str




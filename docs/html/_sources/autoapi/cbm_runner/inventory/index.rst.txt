:py:mod:`cbm_runner.inventory`
==============================

.. py:module:: cbm_runner.inventory

.. autoapi-nested-parse::

   Inventory Module
   ================
   This module is responsible for managing inventory data for forest simulation in a CBM (Carbon Budget Modeling) context.
   It handles the creation and structuring of inventory data for both baseline and scenario-based simulations.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cbm_runner.inventory.Inventory




.. py:class:: Inventory(calibration_year, config_path, afforestation_data)


   Manages the inventory data for forest simulation in a CBM (Carbon Budget Modeling) context.

   This class is responsible for managing and processing inventory data, including legacy forest inventory and afforestation data. It handles the creation and structuring of inventory data for both baseline and scenario-based simulations.

   .. attribute:: loader_class

      Instance of the Loader class for loading various data.

      :type: Loader

   .. attribute:: data_manager_class

      Instance of the DataManager class for managing configuration and data retrieval.

      :type: DataManager

   .. attribute:: afforestation_data

      Data related to afforestation events.

      :type: dict

   .. attribute:: age_df

      Data structure containing information about forest age.

      :type: DataFrame

   .. attribute:: baseline_forest_classifiers

      Classifiers for the baseline forest scenario.

      :type: dict

   .. attribute:: scenario_forest_classifiers

      Classifiers for different scenario-based forests.

      :type: dict

   .. attribute:: legacy_year

      The calibration year.

      :type: int

   .. attribute:: soils_dict

      Dictionary containing information about different soil types.

      :type: dict

   .. attribute:: yield_baseline_dict

      Dictionary mapping yield classes to their respective baseline proportions nationally.

      :type: dict

   .. method:: legacy_forest_inventory()

      Generates inventory data for legacy forests.

   .. method:: make_inventory_structure(scenario, path, ID, delay, UNFCCCLC)

      Creates the structure of the inventory based on specified parameters.

   .. method:: fill_baseline_inventory(scenario, inventory_df, forest_type, species, soil, yield_class, ageID)

      Fills the baseline inventory with specific data.

   .. method:: inventory_iterator(scenario, inventory_df)

      Iterates over the inventory data and populates it with relevant information.

   .. method:: afforestation_inventory(scenario, inventory_df)

      Generates inventory data for afforestation.

   .. method:: scenario_afforestation_dict(scenario_afforestation_areas)

      Generates a dictionary for scenario-based afforestation areas.

   .. method:: combined_mineral_afforestation_dict(scenario_afforestation_areas)

      Combines mineral afforestation and legacy afforestation.

   .. method:: legacy_afforestation()

      Retrieves and processes legacy afforestation data.

   .. method:: legacy_afforestation_annual()

      Processes annual legacy afforestation data.

   .. method:: afforestation_annual_dict(afforestation_df)

      Converts afforestation data into an annual dictionary format.
      

   .. py:method:: legacy_forest_inventory()

      Calculate the legacy forest inventory data based on National Inventory Report forest data and Central Statistics Office species proportion.

      :returns: Dataframe containing the species, peat, and mineral columns.
      :rtype: pandas.DataFrame


   .. py:method:: make_inventory_structure(scenario, path, ID='False', delay=0, UNFCCCLC=2)

      Creates an inventory structure based on the given scenario and parameters.

      :param scenario: The scenario for which the inventory is being created.
      :type scenario: str
      :param path: The path where the inventory will be saved.
      :type path: str
      :param ID: Fills the UsingID column, defaults to False.
      :type ID: str, optional
      :param delay: The delay in years for the inventory. Defaults to 0.
      :type delay: int, optional
      :param UNFCCCLC: The UNFCCC land class code for the inventory. Defaults to 2.
      :type UNFCCCLC: int, optional

      :returns: The inventory structure as a DataFrame.
      :rtype: pandas.DataFrame


   .. py:method:: fill_baseline_inventory(scenario, inventory_df, forest_type, species, soil, yield_class, ageID)

      Fills the baseline inventory dataframe with calculated values based on the given parameters.

      :param scenario: The scenario for the inventory.
      :type scenario: str
      :param inventory_df: The baseline inventory dataframe to be filled.
      :type inventory_df: pandas.DataFrame
      :param forest_type: The forest type (L, A).
      :type forest_type: str
      :param species: The species of the forest.
      :type species: str
      :param soil: The soil type.
      :type soil: str
      :param yield_class: The yield class.
      :type yield_class: str
      :param ageID: The age ID.
      :type ageID: int

      :returns: The filled baseline inventory dataframe.
      :rtype: pandas.DataFrame


   .. py:method:: inventory_iterator(scenario, inventory_df)

      Iterates over different combinations of age, species, forest type, soil class, and yield class
      to fill the baseline inventory dataframe for a given scenario.

      :param scenario: The scenario for which the baseline inventory is being filled.
      :type scenario: str
      :param inventory_df: The baseline inventory dataframe.
      :type inventory_df: pandas.DataFrame

      :returns: The updated baseline inventory dataframe.
      :rtype: pandas.DataFrame


   .. py:method:: afforestation_inventory(scenario, inventory_df)

      Calculate the afforestation inventory based on the given scenario and inventory dataframe.

      :param scenario: The scenario for which the afforestation inventory is calculated.
      :type scenario: str
      :param inventory_df: The inventory dataframe containing the classifier information.
      :type inventory_df: pd.DataFrame

      :returns: The updated inventory dataframe with afforestation areas calculated.
      :rtype: pd.DataFrame


   .. py:method:: scenario_afforesation_dict(scenario_afforestation_areas)

      Calculate the areas of afforestation for each yield class and species based on the scenario afforestation areas.

      :param scenario_afforestation_areas: An object containing the species and total area of afforestation for each species.
      :type scenario_afforestation_areas: ScenarioAfforestationAreas

      :returns: A dictionary containing the areas of afforestation for each yield class and species.
      :rtype: dict


   .. py:method:: combined_mineral_afforestation_dict(scenario_afforestation_areas)

      Combines the afforestation areas from the scenario afforestation dictionary
      with the legacy afforestation areas for mineral afforestation.

      :param scenario_afforestation_areas: A dictionary containing the afforestation
                                           areas for different yield classes and species in the scenario.
      :type scenario_afforestation_areas: dict

      :returns:

                A dictionary containing the combined afforestation areas for different
                    yield classes and species, including both scenario and legacy afforestation.
      :rtype: dict


   .. py:method:: legacy_afforestation()

      Calculate the afforestation areas for legacy years.

      Returns a dictionary containing the sum of afforestation areas for peat and mineral soils,
      grouped by yield class.

      :returns:

                A dictionary with the following structure:
                    {
                        "peat_afforestation": {
                            yield_class: {
                                col1: sum1,
                                col2: sum2,
                                ...
                            },
                            ...
                        },
                        "mineral_afforestation": {
                            yield_class: {
                                col1: sum1,
                                col2: sum2,
                                ...
                            },
                            ...
                        }
                    }
      :rtype: dict


   .. py:method:: legacy_afforestation_annual()

      Calculate the annual afforestation for legacy years.

      :returns:

                A dictionary containing the annual afforestation data for peat and mineral soils.
                    The dictionary has the following keys:
                    - "peat_afforestation": A DataFrame containing the annual afforestation data for peat soils.
                    - "mineral_afforestation": A DataFrame containing the annual afforestation data for mineral soils.
      :rtype: dict


   .. py:method:: afforestation_annual_dict(afforestation_df)

      Generate a dictionary containing annual afforestation data.

      :param afforestation_df: DataFrame containing afforestation data.
      :type afforestation_df: pandas.DataFrame

      :returns:

                A dictionary with the following structure:
                    {
                        year1: {
                            species1: {
                                yield_class1: total1,
                                yield_class2: total2,
                                ...
                            },
                            species2: {
                                yield_class1: total1,
                                yield_class2: total2,
                                ...
                            },
                            ...
                        },
                        year2: {
                            ...
                        },
                        ...
                    }
                The dictionary contains the sum of afforestation values for each species and yield class
                for each year in the input DataFrame.
      :rtype: dict




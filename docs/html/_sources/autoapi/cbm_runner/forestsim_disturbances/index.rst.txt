:py:mod:`cbm_runner.forestsim_disturbances`
===========================================

.. py:module:: cbm_runner.forestsim_disturbances


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cbm_runner.forestsim_disturbances.ForestSimDistrubances




.. py:class:: ForestSimDistrubances(config_path, calibration_year, forest_end_year, afforestation_data, afforesataion_annual_data, scenario_data)


   ForestSimDistrubances class represents the disturbances in a forest simulation.
   This is used when the user wishes to siumulate afforestation with areas per year explicitly defined.
   It provides methods to handle legacy disturbances, scenario disturbances, and afforestation data.

   .. attribute:: config_path

      The path to the configuration file.

      :type: str

   .. attribute:: calibration_year

      The year used for calibration.

      :type: int

   .. attribute:: forest_end_year

      The year when the forest simulation ends.

      :type: int

   .. attribute:: afforestation_data

      The data for afforestation.

      :type: pd.DataFrame

   .. attribute:: afforesataion_annual_data

      The annual data for afforestation.

      :type: pd.DataFrame

   .. attribute:: scenario_data

      The scenario data.

      :type: dict

   .. method:: _scenario_afforestation_area(scenario)

      Calculates the afforestation area for a given scenario.

   .. method:: legacy_disturbance_afforestation_area(years)

      Calculates the afforestation area for legacy disturbances in the given years.

   .. method:: disturbance_structure()

      Returns the disturbance structure.

   .. method:: fill_legacy_data()

      Fills the legacy disturbance data.

   .. method:: fill_baseline_forest()

      Fills the baseline forest data.

   .. method:: fill_scenario_data(scenario)

      Fills the scenario data for a given scenario.

   .. method:: _process_scenario_harvest_data(tracker, row_data, context)

      Processes the scenario harvest data.

   .. method:: _track_scenario_harvest(tracker, row_data, context)

      Tracks the scenario harvest.

   .. method:: _drop_zero_area_rows(disturbance_df)

      Drops rows with zero area from the disturbance dataframe.

   .. method:: _get_legacy_classifier_combinations()

      Returns the combinations of legacy classifiers.

   .. method:: _get_scenario_classifier_combinations()

      Returns the combinations of scenario classifiers.

   .. method:: _get_classifier_combinations()

      Returns the combinations of classifiers.

   .. method:: _get_static_defaults()

      Returns the static defaults.

   .. method:: _generate_row(species, forest_type, soil, yield_class, dist, yr)

      Generates a row of disturbance data.

   .. method:: _process_scenario_row_data(row_data, context, dataframes)

      Processes the scenario row data.

   .. method:: _process_row_data(row_data, context, dataframes)

      Processes the row data.

   .. method:: _handle_legacy_scenario_forest(row_data, context, dataframes)

      Handles the legacy scenario forest.

   .. method:: _handle_scenario_afforestation(row_data, context, dataframes)

      Handles the scenario afforestation.

   .. method:: _handle_legacy_afforestation(row_data, context, dataframes)

      Handles the legacy afforestation.

   .. method:: _handle_legacy_forest(row_data, context, dataframes)

      Handles the legacy forest.

   .. method:: _update_disturbance_timing(row_data, context, dataframes)

      Updates the disturbance timing.

   .. method:: get_legacy_forest_area_breakdown()

      Returns the breakdown of legacy forest area.

   .. method:: legacy_disturbance_tracker(tracker, years)

      Tracks the legacy disturbances in the given years.
      

   .. py:method:: _scenario_afforestation_area(scenario)

      Calculate the afforestation area for each species and year in the given scenario.

      :param scenario: The scenario for which to calculate the afforestation area.
      :type scenario: str

      :returns:

                A dictionary containing the afforestation area for each species and year.
                      The keys of the dictionary are the years relative to the calibration year,
                      and the values are nested dictionaries where the keys are species names
                      and the values are the corresponding afforestation areas.
      :rtype: dict


   .. py:method:: legacy_disturbance_afforestation_area(years)

      Calculate the afforestation area resulting from legacy disturbances over the given years.

      :param years: The number of years to consider for calculating the afforestation area.
      :type years: int

      :returns: The afforestation area resulting from legacy disturbances.
      :rtype: float


   .. py:method:: disturbance_structure()

      Returns the disturbance structure of the forest simulation.

      Returns: The disturbance structure.


   .. py:method:: fill_legacy_data()

      Fills the legacy data for the disturbance class.

      :returns: The filled legacy data.


   .. py:method:: fill_baseline_forest()

      Fills the baseline forest with disturbances.

      :returns: The filled baseline forest.


   .. py:method:: fill_scenario_data(scenario)

      Fills the scenario data for disturbances in the forest simulation.

      :param scenario: The scenario for which the data is being filled.

      :returns: The DataFrame containing the filled disturbance data.
      :rtype: disturbance_df


   .. py:method:: _process_scenario_harvest_data(tracker, row_data, context)

      Process the harvest data for a scenario.

      :param tracker: The tracker object for tracking forest for harvest.
      :type tracker: Tracker
      :param row_data: The row data containing information about the harvest.
      :type row_data: dict
      :param context: The context containing additional information.
      :type context: dict

      :returns: The result of processing the harvest data.


   .. py:method:: _track_scenario_harvest(tracker, row_data, context)

      Track the scenario harvest using the given tracker, row data, and context.

      :param tracker: The tracker object used to track the harvest.
      :param row_data: The row data containing information about the harvest.
      :param context: The context object containing additional information.

      :returns: The result of the `_track_scenario_harvest` method of the disturbance class.


   .. py:method:: _drop_zero_area_rows(disturbance_df)

      Drops rows from the disturbance dataframe that have zero area.

      :param disturbance_df: The disturbance dataframe.
      :type disturbance_df: pandas.DataFrame

      :returns: The disturbance dataframe with zero area rows dropped.
      :rtype: pandas.DataFrame


   .. py:method:: _get_legacy_classifier_combinations()

      Get the legacy classifier combinations.

      :returns: The legacy classifier combinations.


   .. py:method:: _get_scenario_classifier_combinations()

      Get the scenario classifier combinations.

      :returns: A list of scenario classifier combinations.


   .. py:method:: _get_classifier_combinations()

      Get the combinations of classifiers used for disturbance classification.

      :returns: A list of tuples representing the combinations of classifiers.
      :rtype: list


   .. py:method:: _get_static_defaults()

      Get the static defaults for the disturbance class.

      :returns: A dictionary containing the static defaults for the disturbance class.
      :rtype: dict


   .. py:method:: _generate_row(species, forest_type, soil, yield_class, dist, yr)

      Generate a row of data for a specific disturbance event.

      :param species: The species of the forest.
      :type species: str
      :param forest_type: The type of forest.
      :type forest_type: str
      :param soil: The type of soil.
      :type soil: str
      :param yield_class: The yield class of the forest.
      :type yield_class: int
      :param dist: The type of disturbance.
      :type dist: str
      :param yr: The year of the disturbance event.
      :type yr: int

      :returns: The generated row of data for the disturbance event.
      :rtype: object


   .. py:method:: _process_scenario_row_data(row_data, context, dataframes)

      Process the row data for a scenario.

      :param row_data: The row data for the scenario.
      :type row_data: dict
      :param context: The context information for the scenario.
      :type context: dict
      :param dataframes: The dataframes used for processing.
      :type dataframes: dict

      :returns: The processed scenario row data.


   .. py:method:: _process_row_data(row_data, context, dataframes)

      Process the row data using the disturbance class.

      :param row_data: The row data to be processed.
      :type row_data: dict
      :param context: The context information for the processing.
      :type context: dict
      :param dataframes: The dataframes used for processing.
      :type dataframes: dict

      :returns: The processed row data.


   .. py:method:: _handle_legacy_scenario_forest(row_data, context, dataframes)

      Handle the legacy scenario forest.

      :param row_data: The row data.
      :type row_data: dict
      :param context: The context.
      :type context: dict
      :param dataframes: The dataframes.
      :type dataframes: dict

      :returns: The result of `_handle_legacy_scenario_forest` method of the disturbance class.


   .. py:method:: _handle_scenario_afforestation(row_data, context, dataframes)

      Handle the scenario of afforestation.

      :param row_data: The row data for the afforestation scenario.
      :type row_data: dict
      :param context: The context data for the afforestation scenario.
      :type context: dict
      :param dataframes: The dataframes used in the afforestation scenario.
      :type dataframes: dict

      :returns: The result of the _handle_scenario_afforestation method of the disturbance class.


   .. py:method:: _handle_legacy_afforestation(row_data, context, dataframes)

      Handles legacy afforestation by calling the corresponding method in the disturbance class.

      :param row_data: The row data containing information about the afforestation event.
      :type row_data: dict
      :param context: The context data for the simulation.
      :type context: dict
      :param dataframes: The dataframes used in the simulation.
      :type dataframes: dict

      :returns: The result of the `_handle_legacy_afforestation` method in the disturbance class.


   .. py:method:: _handle_legacy_forest(row_data, context, dataframes)

      Handle legacy forest data.

      This method delegates the handling of legacy forest data to the disturbance class.

      :param row_data: The row data for the forest.
      :type row_data: dict
      :param context: The context data for the simulation.
      :type context: dict
      :param dataframes: The dataframes used in the simulation.
      :type dataframes: dict

      :returns: The result of the disturbance class's `_handle_legacy_forest` method.


   .. py:method:: _update_disturbance_timing(row_data, context, dataframes)

      Updates the timing of disturbances for the given row data, context, and dataframes.

      :param row_data: The row data containing information about the disturbances.
      :type row_data: dict
      :param context: The context information for the disturbances.
      :type context: dict
      :param dataframes: The dataframes containing the disturbance data.
      :type dataframes: dict

      :returns: The updated disturbance timing.


   .. py:method:: get_legacy_forest_area_breakdown()

      Get the breakdown of legacy forest area by disturbance class.

      :returns: A dictionary containing the breakdown of legacy forest area by disturbance class.
      :rtype: dict


   .. py:method:: legacy_disturbance_tracker(tracker, years)

      Apply legacy disturbances to the forest tracker.

      Parameters:
      - tracker: The disturbance tracker object.
      - years: The number of years to track disturbances.

      Returns:
      None




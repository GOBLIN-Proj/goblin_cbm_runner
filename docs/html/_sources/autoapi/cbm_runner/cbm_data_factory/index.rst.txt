:py:mod:`cbm_runner.cbm_data_factory`
=====================================

.. py:module:: cbm_runner.cbm_data_factory


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cbm_runner.cbm_data_factory.DataFactory




.. py:class:: DataFactory(config_path, calibration_year, forest_end_year, afforestation_data, scenario_data)


   A class that represents a data factory for creating and managing input data for CBM simulations.

   This class facilitates the generation and organization of various input files required for running
   Carbon Budget Model (CBM) simulations. It handles the creation of directories, configuration files,
   classifiers, age classes, yield curves, inventories, disturbance events, disturbance types,
   and transition rules for different scenarios.

   :param config_path: The path to the configuration file.
   :type config_path: str
   :param calibration_year: The calibration year.
   :type calibration_year: int
   :param forest_end_year: The forest end year.
   :type forest_end_year: int
   :param afforestation_data: The afforestation data.
   :type afforestation_data: dict
   :param scenario_data: The scenario data.
   :type scenario_data: dict

   .. attribute:: loader_class

      An instance of the Loader class.

      :type: Loader

   .. attribute:: data_manager_class

      An instance of the DataManager class.

      :type: DataManager

   .. attribute:: json_creator_class

      An instance of the CreateJSON class.

      :type: CreateJSON

   .. attribute:: inventory_class

      An instance of the Inventory class.

      :type: Inventory

   .. attribute:: disturbance_class

      An instance of the Disturbances class.

      :type: Disturbances

   .. attribute:: transition_class

      An instance of the Transition class.

      :type: Transition

   .. attribute:: afforestation_data

      The afforestation data.

      :type: dict

   .. method:: set_input_data_dir(sc, path)

      Sets the input data directory for a scenario.

   .. method:: set_baseline_input_data_dir(path)

      Sets the baseline input data directory.

   .. method:: make_data_dirs(scenarios, path)

      Creates data directories for the specified scenarios.

   .. method:: clean_data_dir(path)

      Cleans the specified data directory.

   .. method:: clean_baseline_data_dir(path)

      Cleans the baseline data directory.

   .. method:: make_config_json(scenario, path)

      Creates the configuration JSON file for a scenario.

   .. method:: make_classifiers(scenario, path)

      Creates the classifiers CSV file for a scenario.

   .. method:: make_age_classes(scenario, path)

      Creates the age classes CSV file for a scenario.

   .. method:: make_yield_curves(scenario, path)

      Creates the yield curves CSV file for a scenario.

   .. method:: make_inventory(scenario, path)

      Creates the inventory CSV file for a scenario.

   .. method:: make_disturbance_events(scenario, path)

      Creates the disturbance events CSV file for a scenario.

   .. method:: make_disturbance_type(scenario, path)

      Creates the disturbance type CSV file for a scenario.

   .. method:: make_transition_rules(scenario, path)

      Creates the transition rules CSV file for a scenario.
      

   .. py:method:: set_input_data_dir(sc, path)

      Sets the input data directory.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str

      :returns: A tuple containing the SIT object, classifiers, and inventory.
      :rtype: tuple


   .. py:method:: set_baseline_input_data_dir(path)

      Sets the baseline input data directory.

      :param path: The path to the baseline input data directory.
      :type path: str

      :returns: A tuple containing the SIT object, classifiers, and inventory.
      :rtype: tuple


   .. py:method:: make_data_dirs(scenarios, path)

      Creates data directories.

      :param scenarios: A list of scenario numbers.
      :type scenarios: list
      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_data_dir(path)

      Cleans the data directory.

      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_baseline_data_dir(path)

      Cleans the baseline data directory.

      :param path: The path to the baseline data directory.
      :type path: str


   .. py:method:: make_config_json(scenario, path)

      Creates the configuration JSON file.

      :param scenario: The scenario number.
      :type scenario: int
      :param path: The path to the output directory.
      :type path: str


   .. py:method:: make_classifiers(scenario, path)

      Generates a dataframe of classifiers and saves it as a CSV file.

      Parameters:
      - scenario (str): The scenario name. If provided, classifiers for the scenario will be generated.
      - path (str): The path where the CSV file will be saved.

      Returns:
      None


   .. py:method:: make_age_classes(scenario, path)

      Creates age classes DataFrame and saves it as a CSV file.

      :param scenario: The scenario name. If provided, the CSV file will be saved in a subdirectory with the scenario name.
      :type scenario: str
      :param path: The path where the CSV file will be saved.
      :type path: str

      :returns: None


   .. py:method:: make_yield_curves(scenario, path)

      Creates the yield curves CSV file.

      :param scenario: The scenario number.
      :type scenario: int
      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_inventory(scenario, path)

      Create an inventory DataFrame based on the given scenario and path.

      :param scenario: The scenario for which the inventory is created.
      :type scenario: str
      :param path: The path where the inventory file will be saved.
      :type path: str

      :returns: The created inventory DataFrame.
      :rtype: pandas.DataFrame

      :raises None:


   .. py:method:: make_disturbance_events(scenario, path)

      Generate disturbance events data and save it as a CSV file.

      :param scenario: The scenario name. If None, baseline forest data will be generated.
      :type scenario: str or None
      :param path: The path to save the disturbance events CSV file.
      :type path: str

      :returns: None


   .. py:method:: make_disturbance_type(scenario, path)

      Creates a disturbance type CSV file based on the given scenario and saves it to the specified path.

      Parameters:
      - scenario (str): The scenario for which the disturbance type CSV file is created. If None, the baseline disturbance types are used.
      - path (str): The path where the disturbance type CSV file is saved.

      Returns:
      None


   .. py:method:: make_transition_rules(scenario, path)

      Generate transition rules based on the given scenario and save them to a CSV file.

      :param scenario: The scenario for which the transition rules are generated.
                       If None, the transition rules are generated for all scenarios.
      :type scenario: str or None
      :param path: The path where the CSV file should be saved.
      :type path: str

      :returns: None




:py:mod:`cbm_runner.historic_affor.historic_affor_runner`
=========================================================

.. py:module:: cbm_runner.historic_affor.historic_affor_runner

.. autoapi-nested-parse::

   Historic Afforestation Runner Module
   ====================================
   This module provides functionalities to run historic afforestation simulations using the Carbon Budget Model (CBM).

   This class is designed to facilitate the execution of Carbon Budget Model (CBM) simulations for assessing historic afforestation efforts in Ireland.

   The module is intended largely for validation of historic afforestation input data, leveraging a suite of data management and simulation tools to prepare, execute, and analyze CBM simulations.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cbm_runner.historic_affor.historic_affor_runner.HistoricAfforRunner




.. py:class:: HistoricAfforRunner(config_path, calibration_year, afforest_data, scenario_data, gen_baseline=False, gen_validation=False)


   Facilitates the execution of Carbon Budget Model (CBM) simulations for assessing historic afforestation efforts in Ireland.
   Designed primarily for the validation of historic afforestation input data, this class leverages a suite of data management and
   simulation tools to prepare, execute, and analyze CBM simulations. It focuses on generating outputs such as carbon stocks
   and fluxes across various afforestation scenarios, offering insights into the carbon budget implications of past afforestation activities.

   :param config_path: The path to the CBM configuration file.
   :type config_path: str
   :param calibration_year: The year used for calibration.
   :type calibration_year: int
   :param afforest_data: The afforestation data.
   :type afforest_data: AfforestData
   :param scenario_data: The scenario data.
   :type scenario_data: ScenarioData
   :param gen_baseline: A boolean indicating whether to generate baseline data
   :type gen_baseline: bool
   :param gen_validation: A boolean indicating whether to generate validation data
   :type gen_validation: bool

   .. attribute:: paths_class

      Manages the directory paths for input data, baseline configuration, and validation, ensuring a clean and organized data environment.

      :type: Paths

   .. attribute:: gen_validation

      A boolean indicating whether to generate validation data, critical for ensuring the accuracy and reliability of simulation results.

      :type: bool

   .. attribute:: validation_path

      Directory path for validation data, supporting the validation of simulation outputs and the assessment of data quality.

      :type: str

   .. attribute:: path

      Directory path where input data is stored, facilitating data management and simulation setup.

      :type: str

   .. attribute:: baseline_conf_path

      Directory path for baseline configuration data, critical for initializing simulation parameters.

      :type: str

   .. attribute:: cbm_data_class

      Manages the creation and organization of CBM data, ensuring accurate simulation inputs.

      :type: DataFactory

   .. attribute:: data_manager_class

      Oversees data retrieval and configuration, aligning simulation data with scenario requirements.

      :type: DataManager

   .. attribute:: INDEX

      Collection of unique identifiers for each afforestation scenario, supporting scenario-specific simulations.

      :type: list

   .. attribute:: forest_end_year

      Marks the termination year of the forest simulation, defining the temporal scope of the analysis.

      :type: int

   .. attribute:: runner_class

      Executes CBM simulation scenarios, generating key outputs like carbon stocks and fluxes.

      :type: Runner

   .. method:: generate_input_data()

      
      Prepares the input data necessary for CBM simulations, establishing a clean and organized data environment for scenario execution.
      

   .. method:: afforestation_scenarios_structure()

      
      Gathers structural data for each afforestation scenario, providing a comprehensive overview of scenario-specific simulation setups.
      

   .. method:: run_flux_scenarios()

      
      Executes simulations to calculate carbon flux data across different scenarios, merging and aggregating results to analyze carbon dynamics.
      

   .. method:: run_aggregate_scenarios()

      
      Conducts simulations to generate aggregate carbon stock data from various scenarios, facilitating a holistic analysis of carbon storage outcomes.
      

   .. method:: run_libcbm_flux_scenarios()

      
      Utilizes the libCBM tool to run aggregate scenarios, focusing on the generation and analysis of carbon flux data within a library-based CBM framework.
      

   .. method:: cbm_aggregate_scenario(scenario)

      
      Conducts an aggregate scenario simulation, yielding carbon stock data for scenario analysis and comparison.
      

   .. method:: libcbm_scenario_fluxes(scenario)

      
      Invokes libCBM to calculate carbon fluxes for a given scenario, enhancing the depth of analysis with library-supported CBM functionalities.
      

   .. note:: An external path must be provided when generating validation data.

   .. py:method:: generate_input_data()

      Generates input data for the CBM runner.

      This method cleans the data directory, creates necessary directories,
      and generates various input files required for the CBM runner.

      :param None:

      :returns: None


   .. py:method:: afforestation_scenarios_structure()

      Retrieves the structure data for each afforestation scenario.

      :returns: A DataFrame containing the structure data for each afforestation scenario.
      :rtype: pandas.DataFrame


   .. py:method:: run_flux_scenarios()

      Runs carbon flux scenarios for each index in self.INDEX.

      :returns: A DataFrame containing the merged and added data from each scenario.
      :rtype: pandas.DataFrame


   .. py:method:: run_aggregate_scenarios()

      Runs aggregate scenarios for forest data.

      This method iterates over a set of scenarios and generates carbon stock data for each scenario.
      It merges the forest data with a baseline forest data, adds selected columns, and drops duplicate columns.
      The carbon stock data for all scenarios is then concatenated into a single DataFrame.

      :returns: The carbon stock data for all scenarios.
      :rtype: pd.DataFrame


   .. py:method:: run_libcbm_flux_scenarios()

      Runs aggregate scenarios for forest data.

      This method iterates over a set of scenarios and generates carbon stock data for each scenario.
      It merges the forest data with a baseline forest data, adds selected columns, and drops duplicate columns.
      The carbon stock data for all scenarios is then concatenated into a single DataFrame.

      :returns: The carbon stock data for all scenarios.
      :rtype: pd.DataFrame


   .. py:method:: cbm_aggregate_scenario(scenario)

      Runs aggregate scenarios for forest data.

      This method iterates over a set of scenarios and generates carbon stock data for each scenario.
      It merges the forest data with a baseline forest data, adds selected columns, and drops duplicate columns.
      The carbon stock data for all scenarios is then concatenated into a single DataFrame.

      :param scenario: The scenario number.
      :type scenario: int

      :returns: The carbon stock data for all scenarios.
      :rtype: pd.DataFrame


   .. py:method:: libcbm_scenario_fluxes(scenario)

      Generate carbon Fluxes using the Libcbm method for the CBM (Carbon Budget Model) scenario data.

      :param sc: The scenario name.
      :type sc: str

      :returns:

                A dictionary containing the aggregated data.
                    - "Stock": DataFrame containing annual carbon stocks.
                    - "Raw": DataFrame containing raw data.
      :rtype: dict




:py:mod:`default_runner.cbm_data_factory`
=========================================

.. py:module:: default_runner.cbm_data_factory

.. autoapi-nested-parse::

   Data Factory Module
   ==============
   This module contains the DataFactory class, which is used to create and manage input data for CBM simulations.

   **Key Features**

   * **Dynamic Data Generation:** Creates and organizes input files (configuration files, classifiers, age classes, yield curves, inventories, disturbance events/types, and transition rules) for both baseline and specific scenarios.
   * **Flexibility:** Facilitates customization of CBM simulations by allowing modification of input data.
   * **Data Integrity:** Ensures consistency and accuracy of generated CBM input data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   default_runner.cbm_data_factory.DataFactory




.. py:class:: DataFactory(config_path, calibration_year, forest_end_year, afforestation_data, scenario_data)


   A class that represents a data factory for creating and managing input data for CBM simulations.

   ... (Existing class description)

   .. attribute:: loader_class

      An instance of the Loader class for loading data.

      :type: Loader

   .. attribute:: data_manager_class

      Handles CBM configuration data.

      :type: DataManager

   .. attribute:: json_creator_class

      Constructs JSON configuration files.

      :type: CreateJSON

   .. attribute:: inventory_class

      Manages inventory data.

      :type: Inventory

   .. attribute:: disturbance_class

      Manages disturbance data.

      :type: Disturbances

   .. attribute:: transition_class

      Manages transition rules.

      :type: Transition

   .. attribute:: afforestation_data

      Data related to afforestation.

      :type: dict

   .. method:: set_input_data_dir(sc, path)

      Sets the input data directory for a scenario, loads SIT, classifiers, and inventory.

   .. method:: set_baseline_input_data_dir(path)

      Sets the baseline input data directory, loads SIT, classifiers, and inventory.

   .. method:: make_data_dirs(scenarios, path)

      Creates data directories for specified scenarios.

   .. method:: clean_data_dir(path)

      Removes existing data from a directory.

   .. method:: clean_baseline_data_dir(path)

      Removes existing data from the baseline directory.

   .. method:: make_config_json(scenario, path)

      Creates a configuration JSON file.

   .. method:: make_classifiers(scenario, path)

      Creates a classifiers CSV file.

   .. method:: make_age_classes(scenario, path)

      Creates an age classes CSV file.

   .. method:: make_yield_curves(scenario, path)

      Creates a yield curves CSV file.

   .. method:: make_inventory(scenario, path)

      Creates an inventory CSV file.

   .. method:: make_disturbance_events(scenario, path)

      Creates a disturbance events CSV file.

   .. method:: make_disturbance_type(scenario, path)

      Creates a disturbance type CSV file.

   .. method:: make_transition_rules(scenario, path)

      Creates a transition rules CSV file.

   .. method:: make_base_age_classes(path)

      Creates the baseline age classes CSV file.

   .. method:: make_base_classifiers(path)

      Creates the baseline classifiers CSV file.

   .. method:: make_base_yield_curves(path)

      Creates the baseline yield curves CSV files.

   .. method:: make_base_inventory(path)

      Creates the baseline inventory CSV file.

   .. method:: make_base_disturbance_events(path)

      Creates the baseline disturbance events CSV file.

   .. method:: make_base_disturbance_type(path)

      Creates the baseline disturbance type CSV file.

   .. method:: make_base_transition_rules(path)

      Creates the baseline transition rules CSV file.
      

   .. py:method:: set_input_data_dir(sc, path, db_path)

      Sets the input data directory for a scenario, initializes the CBM simulation data.

      This methods loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str

      :returns:

                A tuple containing the following:
                    * SIT object:  The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_baseline_input_data_dir(path, db_path)

      Sets the input data directory for the baseline, initializes the CBM simulation data.

      This methods loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str

      :returns:

                A tuple containing the following:
                    * SIT object:  The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: set_spinup_baseline_input_data_dir(path, db_path)

      Sets the input data directory for the baseline, initializes the CBM simulation data.

      This methods loads the following using the CBM's Standard Import Tool (SIT):
          * SIT configuration: Settings that govern how the CBM simulation runs
          * Classifiers: Descriptions of forest stands (species, soil type, etc.)
          * Inventory: Data on the initial forest composition.

      :param sc: The scenario number.
      :type sc: int
      :param path: The path to the input data directory.
      :type path: str

      :returns:

                A tuple containing the following:
                    * SIT object:  The loaded SIT configuration.
                    * classifiers (DataFrame): Classifiers for the forest stands.
                    * inventory (DataFrame): The forest inventory data.
      :rtype: tuple


   .. py:method:: make_data_dirs(scenarios, path)

      Creates data directories.

      :param scenarios: A list of scenario numbers.
      :type scenarios: list
      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_data_dir(path)

      Cleans the data directory.

      :param path: The path to the data directory.
      :type path: str


   .. py:method:: clean_baseline_data_dir(path)

      Cleans the baseline data directory.

      :param path: The path to the baseline data directory.
      :type path: str


   .. py:method:: make_config_json(scenario, path)

      Creates the configuration JSON file.

      :param scenario: The scenario number.
      :type scenario: int
      :param path: The path to the output directory.
      :type path: str


   .. py:method:: make_classifiers(scenario, path)

      Generates a dataframe of classifiers and saves it as a CSV file.

      Parameters:
      - scenario (str): The scenario name. If provided, classifiers for the scenario will be generated.
      - path (str): The path where the CSV file will be saved.

      Returns:
      None


   .. py:method:: make_age_classes(scenario, path)

      Creates age classes DataFrame and saves it as a CSV file.

      :param scenario: The scenario name. If provided, the CSV file will be saved in a subdirectory with the scenario name.
      :type scenario: str
      :param path: The path where the CSV file will be saved.
      :type path: str

      :returns: None


   .. py:method:: make_yield_curves(scenario, path)

      Creates the yield curves CSV file.

      :param scenario: The scenario number.
      :type scenario: int
      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_inventory(scenario, path)

      Create an inventory DataFrame based on the given scenario and path.

      :param scenario: The scenario for which the inventory is created.
      :type scenario: str
      :param path: The path where the inventory file will be saved.
      :type path: str

      :returns: The created inventory DataFrame.
      :rtype: pandas.DataFrame

      :raises None:


   .. py:method:: make_disturbance_events(scenario, path)

      Generate disturbance events data and save it as a CSV file.

      :param scenario: The scenario name. If None, baseline forest data will be generated.
      :type scenario: str or None
      :param path: The path to save the disturbance events CSV file.
      :type path: str

      :returns: None


   .. py:method:: make_disturbance_type(scenario, path)

      Creates a disturbance type CSV file based on the given scenario and saves it to the specified path.

      Parameters:
      - scenario (str): The scenario for which the disturbance type CSV file is created. If None, the baseline disturbance types are used.
      - path (str): The path where the disturbance type CSV file is saved.

      Returns:
      None


   .. py:method:: make_transition_rules(scenario, path)

      Generate transition rules based on the given scenario and save them to a CSV file.

      :param scenario: The scenario for which the transition rules are generated.
                       If None, the transition rules are generated for all scenarios.
      :type scenario: str or None
      :param path: The path where the CSV file should be saved.
      :type path: str

      :returns: None


   .. py:method:: make_base_age_classes(path)

      Creates age classes DataFrame for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      :param path: The path where the CSV file will be saved.
      :type path: str

      :returns: None


   .. py:method:: make_base_classifiers(path)

      Generates a dataframe of classifiers for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      Parameters:
      - path (str): The path where the CSV file will be saved.

      Returns:
      None


   .. py:method:: make_base_yield_curves(path)

      Creates the yield and standing volume curves CSV files for managed forest.

      Data for managed forest is referenced internally.

      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_base_inventory(path)

      Creates the inventory data for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_base_disturbance_events(path)

      Creates the disturbance events for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_base_disturbance_type(path)

      Creates the disturbance type data for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      :param path: The path to the output directory.
      :type path: str

      :returns: None


   .. py:method:: make_base_transition_rules(path)

      Creates the transition rules for managed forest and saves it as a CSV file.

      Data for managed forest is referenced internally.

      :param path: The path to the output directory.
      :type path: str

      :returns: None




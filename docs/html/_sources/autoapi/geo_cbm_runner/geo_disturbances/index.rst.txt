:py:mod:`geo_cbm_runner.geo_disturbances`
=========================================

.. py:module:: geo_cbm_runner.geo_disturbances

.. autoapi-nested-parse::

   Geo Disturbances Module
   =======================
   This module manages disturbances within the Carbon Budget Modeling (CBM) framework, specifically tailored for scenarios
   involving afforestation areas at the catchment level, both legacy and scenario-specific disturbances. It organizes and processes
   disturbance data to support the simulation of forest dynamics under varying management and disturbance scenarios.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   geo_cbm_runner.geo_disturbances.Disturbances




.. py:class:: Disturbances(config_path, calibration_year, forest_end_year, afforestation_data, scenario_data)


   Manages disturbances within the Carbon Budget Modeling (CBM) framework, specifically tailored for scenarios
   involving afforestation areas at the catchment level, both legacy and scenario-specific disturbances. It organizes and processes
   disturbance data to support the simulation of forest dynamics under varying management and disturbance scenarios.

   .. attribute:: forest_end_year

      Target end year for forest simulation data.

      :type: int

   .. attribute:: calibration_year

      Base year for data calibration within the simulation.

      :type: int

   .. attribute:: loader_class

      Instance responsible for loading external data resources.

      :type: Loader

   .. attribute:: data_manager_class

      Manages retrieval and organization of simulation data.

      :type: DataManager

   .. attribute:: baseline_forest_classifiers

      Classifier information for baseline forest scenarios.

      :type: dict

   .. attribute:: scenario_forest_classifiers

      Classifier information for specific simulation scenarios.

      :type: dict

   .. attribute:: afforestation_data

      Contains data on afforestation activities, including species and areas.

      :type: DataFrame

   .. attribute:: inventory_class

      Manages the preparation and structuring of forest inventory data.

      :type: Inventory

   .. attribute:: disturbance_timing

      Contains information on the timing and type of disturbances.

      :type: DataFrame

   .. attribute:: disturbance_dataframe

      Central repository of disturbance event data.

      :type: DataFrame

   .. attribute:: scenario_disturbance_dict

      Holds scenario-specific disturbance information.

      :type: dict

   .. attribute:: legacy_disturbance_dict

      Stores information on disturbances in legacy forests.

      :type: dict

   .. attribute:: yield_name_dict

      Maps yield classes to their corresponding names for easier reference.

      :type: dict

   :param config_path: Path to the configuration file guiding the simulation setup.
   :type config_path: str
   :param calibration_year: Reference year from which simulation data is calibrated.
   :type calibration_year: int
   :param forest_end_year: Designated end year for the simulation's forest data.
   :type forest_end_year: int
   :param afforestation_data: Data detailing afforestation projects, including species and area.
   :type afforestation_data: DataFrame
   :param scenario_data: Data defining various simulation scenarios.
   :type scenario_data: DataFrame

   .. method:: scenario_afforestation_area(scenario)

      
      Calculates afforestation areas for a given scenario, breaking down by species and yield class.
      

   .. method:: disturbance_structure()

      
      Establishes the DataFrame structure for recording disturbance events.
      

   .. method:: fill_baseline_forest()

      
      Populates disturbance data for the baseline forest, considering historical disturbances.
      

   .. method:: fill_scenario_data(scenario)

      
      Fills in disturbance data for a specified simulation scenario, incorporating scenario-specific events.
      

   .. method:: _process_scenario_harvest_data(tracker, row_data, context)

      
      Processes and tracks harvest data for a scenario, updating tracker states based on disturbances.
      

   .. method:: _track_scenario_harvest(tracker, row_data, context)

      
      Specifically tracks harvesting activities within a scenario, adjusting forest composition accordingly.
      

   .. method:: _drop_zero_area_rows(disturbance_df)

      
      Removes rows with zero area from the disturbance DataFrame to clean up the dataset.
      

   .. method:: _get_legacy_classifier_combinations()

      
      Generates combinations of classifiers for legacy forests, aiding in disturbance data generation.
      

   .. method:: _get_scenario_classifier_combinations()

      
      Produces classifier combinations for scenario-specific forests, supporting disturbance simulations.
      

   .. method:: _get_classifier_combinations(species, disturbance)

      
      Creates all possible combinations of classifiers based on species and disturbance type.
      

   .. method:: _get_static_defaults()

      
      Retrieves default values for static columns in the disturbance DataFrame.
      

   .. method:: _generate_row(species, forest_type, soil, yield_class, dist, yr)

      
      Generates a single row of disturbance data based on specified parameters.
      

   .. method:: _process_scenario_row_data(row_data, context, dataframes)

      
      Processes row data for a given scenario, applying context-specific rules and adjustments.
      

   .. method:: _handle_legacy_scenario_forest(row_data, context, dataframes)

      
      Handles disturbance data generation for legacy forests within a scenario.
      

   .. method:: _handle_scenario_afforestation(row_data, context, dataframes)

      
      Manages afforestation data within a scenario, adjusting for new forest growth.
      

   .. method:: _update_disturbance_timing(row_data, context, dataframes)

      
      Updates the timing for disturbances based on scenario and forest conditions.
      

   .. method:: get_legacy_forest_area_breakdown()

      
      Calculates a detailed breakdown of legacy forest areas, considering species, yield classes, and soil types.
      

   .. method:: legacy_disturbance_tracker(tracker, years)

      
      Applies legacy disturbances to the forest tracker, updating forest composition over specified years.
      

   .. py:method:: scenario_afforestation_area(scenario)

      Calculates the afforestation area for a given scenario.

      :param scenario: The scenario to calculate afforestation for.
      :type scenario: str

      :returns: A dictionary with species as keys and afforestation areas as values.
      :rtype: dict


   .. py:method:: disturbance_structure()

      Creates a dataframe structure for disturbances.

      :returns: A dataframe with the structure for disturbances.
      :rtype: DataFrame


   .. py:method:: fill_baseline_forest()

      Fills the baseline (managed) forest with disturbance data.

      :returns: DataFrame containing disturbance data.
      :rtype: pandas.DataFrame


   .. py:method:: fill_scenario_data(scenario)

      Fills the disturbance data for a given scenario.

      :param scenario: The scenario for which to fill the disturbance data.

      :returns: The disturbance data DataFrame after filling with scenario data.


   .. py:method:: _process_scenario_harvest_data(tracker, row_data, context)

      Process the harvest data for a scenario.

      :param tracker: The tracker object used to track forest changes.
      :type tracker: Tracker
      :param row_data: The data for a single row.
      :type row_data: dict
      :param context: The context containing additional information.
      :type context: dict

      :returns: None


   .. py:method:: _track_scenario_harvest(tracker, row_data, context)

      Track the harvest scenario in the forest model.

      :param tracker: The tracker object used to track forest changes.
      :type tracker: Tracker
      :param row_data: The data for the current row.
      :type row_data: dict
      :param context: The context containing species, yield class, soil, year, harvest proportion, and age.
      :type context: dict

      :returns: None


   .. py:method:: _drop_zero_area_rows(disturbance_df)

      Drops rows from the disturbance dataframe where the 'Amount' column is zero.

      :param disturbance_df: The disturbance dataframe.
      :type disturbance_df: pandas.DataFrame

      :returns: The disturbance dataframe with zero area rows dropped.
      :rtype: pandas.DataFrame


   .. py:method:: _get_legacy_classifier_combinations()

      Returns all possible combinations of forest keys, soil keys, and yield keys.

      :param self: The Disturbances object.
      :type self: Disturbances

      :returns: A generator that yields all possible combinations of forest keys, soil keys, and yield keys.
      :rtype: combinations (generator)


   .. py:method:: _get_scenario_classifier_combinations()

      Generates combinations of scenario, forest, soil, and yield classifiers.

      :returns: A generator that yields combinations of scenario, forest, soil, and yield classifiers.


   .. py:method:: _get_classifier_combinations(species, disturbance=None)

      Generates all possible combinations of forest types, soil classes, and yield classes.

      :returns: A generator that yields tuples representing the combinations of forest types, soil classes, and yield classes.


   .. py:method:: _get_static_defaults()

      Get the default values for static disturbance columns.

      :returns: A dictionary containing the default values for each static disturbance column.
      :rtype: dict


   .. py:method:: _generate_row(species, forest_type, soil, yield_class, dist, yr)

      Generates a row of data for a disturbance event.

      :param species: The species of the forest.
      :type species: str
      :param forest_type: The type of forest.
      :type forest_type: str
      :param soil: The type of soil.
      :type soil: str
      :param yield_class: The yield class of the forest.
      :type yield_class: str
      :param dist: The disturbance type ID.
      :type dist: int
      :param yr: The year of the disturbance event.
      :type yr: int

      :returns: A dictionary containing the row data for the disturbance event.
      :rtype: dict


   .. py:method:: _process_scenario_row_data(row_data, context, dataframes)

      Process the row data for a scenario based on the given context and dataframes.

      :param row_data: The row data for the scenario.
      :type row_data: dict
      :param context: The context containing forest type and disturbance information.
      :type context: dict
      :param dataframes: The dataframes containing relevant data.
      :type dataframes: dict

      :returns: None


   .. py:method:: _handle_legacy_scenario_forest(row_data, context, dataframes)

      Handles the legacy scenario forest by updating the disturbance timing and setting the amount based on the area.

      :param row_data: The row data for the disturbance.
      :type row_data: dict
      :param context: The context information for the disturbance.
      :type context: dict
      :param dataframes: The dataframes containing additional data.
      :type dataframes: dict

      :returns: None


   .. py:method:: _handle_scenario_afforestation(row_data, context, dataframes)

      Handle the scenario of afforestation.

      This method calculates the amount of afforestation based on the given row data, context, and dataframes.
      It retrieves the afforestation inventory, non-forest dictionary, species, yield class, soil, and configuration classifiers from the context and dataframes.
      The amount of afforestation is calculated based on the afforestation value, yield class proportions, and classifier3 value.
      If the classifier3 value matches the soil value, the amount is calculated using the afforestation value and yield class proportions.
      If there is a TypeError during the calculation, the amount is set to 0.
      If the classifier3 value does not match the soil value, the amount is set to 0.

      Parameters:
      - row_data (dict): The row data for the afforestation scenario.
      - context (dict): The context containing additional information for the calculation.
      - dataframes (dict): The dataframes containing the afforestation inventory.

      Returns:
      - None


   .. py:method:: _update_disturbance_timing(row_data, context, dataframes)

      Retrieve disturbance timing information from the disturbance_timing DataFrame.

      :param row_data: The dictionary containing row data.
      :type row_data: dict
      :param context: The dictionary containing context information.
      :type context: dict
      :param dataframes: The dictionary containing dataframes.
      :type dataframes: dict

      :returns: None

      :raises ValueError: If any of the operations fail due to invalid values.
      :raises KeyError: If any of the required keys are not found.


   .. py:method:: get_legacy_forest_area_breakdown()

      Calculate the breakdown of legacy forest area based on species, yield class, soil type, and age.

      :returns: DataFrame containing the breakdown of legacy forest area.
      :rtype: pandas.DataFrame


   .. py:method:: legacy_disturbance_tracker(tracker, years)

      Apply legacy disturbances to the forest tracker.

      :param tracker: The forest tracker object.
      :type tracker: object
      :param years: List of years to apply disturbances.
      :type years: list

      :returns: None

      .. note:: Unlike the default runner, broadleaf disturnbance can be set.



